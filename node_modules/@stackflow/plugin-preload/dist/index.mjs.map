{
  "version": 3,
  "sources": ["../src/usePreloader.ts", "../src/LoadersContext.tsx", "../src/createPreloader.ts", "../src/pluginPreload.tsx", "../src/useActivityPreloadRef.ts"],
  "sourcesContent": ["import {\n  makeTemplate,\n  normalizeRoute,\n  useRoutes,\n} from \"@stackflow/plugin-history-sync\";\nimport type { ActivityComponentType } from \"@stackflow/react\";\nimport { useMemo } from \"react\";\n\nimport { useLoaders } from \"./LoadersContext\";\n\nexport type PreloadFunc<T extends { [activityName: string]: unknown }> = <\n  K extends Extract<keyof T, string>,\n>(\n  activityName: K,\n  activityParams: T[K] extends ActivityComponentType<infer U> ? U : {},\n  options?: {\n    activityContext?: {};\n  },\n) => any;\n\nexport function usePreloader<T extends { [activityName: string]: unknown }>(): {\n  preload: PreloadFunc<T>;\n} {\n  const loaders = useLoaders();\n  const routes = useRoutes();\n\n  return useMemo(\n    () => ({\n      preload(activityName, activityParams, options) {\n        const loader = loaders[activityName];\n\n        if (!loader) {\n          return null;\n        }\n\n        const route = routes[activityName];\n        const template = route\n          ? makeTemplate(normalizeRoute(route)[0])\n          : undefined;\n        const path = template?.fill(activityParams);\n\n        return loader({\n          activityParams,\n          activityContext: {\n            ...(path ? { path } : null),\n            ...options?.activityContext,\n          },\n        });\n      },\n    }),\n    [loaders],\n  );\n}\n", "import React, { createContext, useContext } from \"react\";\n\nimport type { Loader } from \"./Loader\";\n\nexport type LoadersMap = {\n  [activityName in string]?: Loader;\n};\n\nexport const LoadersContext = createContext<LoadersMap>({});\n\ninterface LoadersProviderProps {\n  loaders: LoadersMap;\n  children: React.ReactNode;\n}\nexport const LoadersProvider: React.FC<LoadersProviderProps> = (props) => (\n  <LoadersContext.Provider value={props.loaders}>\n    {props.children}\n  </LoadersContext.Provider>\n);\n\nexport function useLoaders() {\n  return useContext(LoadersContext);\n}\n", "import type { PreloadFunc } from \"./usePreloader\";\nimport { usePreloader } from \"./usePreloader\";\n\nexport function createPreloader<\n  T extends { [activityName: string]: unknown },\n>(): {\n  usePreloader: () => { preload: PreloadFunc<T> };\n} {\n  return {\n    usePreloader,\n  };\n}\n", "import type {\n  ActivityComponentType,\n  StackflowReactPlugin,\n} from \"@stackflow/react\";\nimport React from \"react\";\n\nimport type { Loader } from \"./Loader\";\nimport { LoadersProvider } from \"./LoadersContext\";\n\nexport type PreloadPluginOptions<\n  T extends { [activityName: string]: unknown },\n> = {\n  loaders: {\n    [key in Extract<keyof T, string>]?: T[key] extends ActivityComponentType<\n      infer U\n    >\n      ? Loader<U>\n      : Loader<{}>;\n  };\n};\n\nexport function preloadPlugin<T extends { [activityName: string]: unknown }>(\n  options: PreloadPluginOptions<T>,\n): StackflowReactPlugin<T> {\n  return () => ({\n    key: \"plugin-preload\",\n    wrapStack({ stack }) {\n      return (\n        <LoadersProvider loaders={options.loaders}>\n          {stack.render()}\n        </LoadersProvider>\n      );\n    },\n    overrideInitialEvents({ initialEvents, initialContext }) {\n      if (initialEvents.length === 0) {\n        return [];\n      }\n\n      return initialEvents.map((event) => {\n        if (event.name !== \"Pushed\") {\n          return event;\n        }\n\n        const { activityName, activityParams, activityContext } = event;\n\n        const loader = options.loaders[activityName];\n\n        if (!loader) {\n          return event;\n        }\n\n        const preloadRef = loader({\n          activityParams,\n          activityContext,\n          isInitialActivity: true,\n          initialContext,\n        });\n\n        return {\n          ...event,\n          activityContext: {\n            ...event.activityContext,\n            preloadRef,\n          },\n        };\n      });\n    },\n    onBeforePush({ actionParams, actions: { overrideActionParams } }) {\n      const { activityName, activityParams, activityContext } = actionParams;\n\n      const loader = options.loaders[activityName];\n\n      if (!loader) {\n        return;\n      }\n\n      const preloadRef = loader({\n        activityParams,\n        activityContext,\n      });\n\n      overrideActionParams({\n        ...actionParams,\n        activityContext: {\n          ...activityContext,\n          preloadRef,\n        },\n      });\n    },\n    onBeforeReplace({ actionParams, actions: { overrideActionParams } }) {\n      const { activityName, activityParams, activityContext } = actionParams;\n\n      const loader = options.loaders[activityName];\n\n      if (!loader) {\n        return;\n      }\n\n      const preloadRef = loader({\n        activityParams,\n        activityContext,\n      });\n\n      overrideActionParams({\n        ...actionParams,\n        activityContext: {\n          ...activityContext,\n          preloadRef,\n        },\n      });\n    },\n  });\n}\n", "import { useActivity } from \"@stackflow/react\";\n\n/**\n * Get current activity preload reference\n */\nexport function useActivityPreloadRef<T>(): T {\n  const activity = useActivity();\n  const activityContext = activity.context as any;\n\n  return activityContext?.preloadRef;\n}\n"],
  "mappings": "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",
  "names": ["makeTemplate", "normalizeRoute", "useRoutes", "useMemo", "React", "createContext", "useContext", "LoadersContext", "LoadersProvider", "props", "useLoaders", "usePreloader", "loaders", "useLoaders", "routes", "useRoutes", "useMemo", "activityName", "activityParams", "options", "loader", "route", "template", "makeTemplate", "normalizeRoute", "path", "__spreadValues", "createPreloader", "usePreloader", "React", "preloadPlugin", "options", "stack", "React", "LoadersProvider", "initialEvents", "initialContext", "event", "activityName", "activityParams", "activityContext", "loader", "preloadRef", "__spreadProps", "__spreadValues", "actionParams", "overrideActionParams", "useActivity", "useActivityPreloadRef", "activityContext"]
}
