{
  "version": 3,
  "sources": ["../src/index.ts", "../src/event-utils/filterEvents.ts", "../src/utils/compareBy.ts", "../src/utils/findIndices.ts", "../src/utils/id.ts", "../src/utils/last.ts", "../src/utils/omit.ts", "../src/utils/once.ts", "../src/utils/uniqBy.ts", "../src/event-utils/makeEvent.ts", "../src/event-utils/validateEvents.ts", "../src/aggregate.ts", "../src/createCoreStore.ts", "../src/produceEffects.ts"],
  "sourcesContent": ["export { aggregate } from \"./aggregate\";\nexport {\n  Activity,\n  ActivityTransitionState,\n  AggregateOutput,\n} from \"./AggregateOutput\";\nexport * from \"./createCoreStore\";\nexport { Effect } from \"./Effect\";\nexport { DomainEvent } from \"./event-types\";\nexport { DispatchEvent, makeEvent } from \"./event-utils\";\nexport * from \"./interfaces\";\nexport { produceEffects } from \"./produceEffects\";\nexport { id } from \"./utils\";\n", "import type { DomainEvent } from \"../event-types\";\n\nexport function filterEvents<T extends DomainEvent[\"name\"]>(\n  events: DomainEvent[],\n  eventName: T,\n) {\n  return events.filter((e) => e.name === eventName) as Array<\n    Extract<DomainEvent, { name: T }>\n  >;\n}\n", "export function compareBy<T>(a: T, b: T, selector: (element: T) => string) {\n  const $a = selector(a);\n  const $b = selector(b);\n\n  if ($a < $b) {\n    return -1;\n  }\n  if ($a === $b) {\n    return 0;\n  }\n  return 1;\n}\n", "export function findIndices<T>(arr: T[], compare: (t: T) => boolean) {\n  return arr\n    .map((e, i) => (compare(e) ? i : undefined))\n    .filter((output): output is number => typeof output === \"number\");\n}\n", "let counterMap = new Map<string, number>();\n\nexport function id() {\n  const t = new Date().getTime().toString();\n\n  const prevCounter = counterMap.get(t);\n  const nextCounter = prevCounter !== undefined ? prevCounter + 1 : 0;\n\n  if (nextCounter === 0) {\n    counterMap = new Map();\n  }\n\n  counterMap.set(t, nextCounter);\n\n  return Number(`${t}${nextCounter.toString().padStart(2, \"0\")}`).toString(16);\n}\n", "export function last<T>(arr: T[]) {\n  return arr.length === 0 ? undefined : arr[arr.length - 1];\n}\n", "export function omit<T extends {}, K extends keyof T>(\n  obj: T,\n  fields: K[],\n): Omit<T, K> {\n  const output = {\n    ...obj,\n  };\n\n  fields.forEach((field) => {\n    delete output[field];\n  });\n\n  return output;\n}\n", "export function once(cb: () => void) {\n  let called = false;\n\n  return () => {\n    if (called) {\n      return;\n    }\n    called = true;\n\n    cb();\n  };\n}\n", "export function uniqBy<T>(arr: T[], by: (item: T) => string | null): T[] {\n  const valueMap = new Map<string, true>();\n\n  return [...arr]\n    .reverse()\n    .filter((item) => {\n      const key = by(item);\n\n      if (key === null) {\n        return true;\n      }\n\n      const exists = !!valueMap.get(key);\n      valueMap.set(key, true);\n\n      return !exists;\n    })\n    .reverse();\n}\n", "import type { DomainEvent } from \"../event-types\";\nimport type { BaseDomainEvent } from \"../event-types/_base\";\nimport { id } from \"../utils\";\n\nexport function makeEvent<T extends DomainEvent[\"name\"]>(\n  name: T,\n  parameters: Omit<\n    Extract<DomainEvent, { name: T }>,\n    \"id\" | \"name\" | \"eventDate\"\n  > &\n    Partial<BaseDomainEvent>,\n) {\n  return {\n    id: id(),\n    eventDate: new Date().getTime(),\n    ...parameters,\n    name,\n  } as Extract<DomainEvent, { name: T }>;\n}\n", "import type { DomainEvent } from \"../event-types\";\nimport { filterEvents } from \"./filterEvents\";\n\nexport function validateEvents(events: DomainEvent[]) {\n  if (events.length === 0) {\n    throw new Error(\"events parameter is empty\");\n  }\n\n  const initEvents = filterEvents(events, \"Initialized\");\n  const activityRegisteredEvents = filterEvents(events, \"ActivityRegistered\");\n  const pushedEvents = filterEvents(events, \"Pushed\");\n\n  if (initEvents.length > 1) {\n    throw new Error(\"InitializedEvent can only exist once\");\n  }\n\n  const registeredActivityNames = activityRegisteredEvents.map(\n    (e) => e.activityName,\n  );\n\n  pushedEvents.forEach((e) => {\n    if (!registeredActivityNames.includes(e.activityName)) {\n      throw new Error(\"the corresponding activity does not exist\");\n    }\n  });\n}\n", "import type {\n  Activity,\n  ActivityTransitionState,\n  AggregateOutput,\n} from \"./AggregateOutput\";\nimport type { DomainEvent, PoppedEvent, ReplacedEvent } from \"./event-types\";\nimport { filterEvents, validateEvents } from \"./event-utils\";\nimport { compareBy, findIndices, last, uniqBy } from \"./utils\";\n\nexport function aggregate(events: DomainEvent[], now: number): AggregateOutput {\n  const sortedEvents = uniqBy(\n    [...events].sort((a, b) => compareBy(a, b, (e) => e.id)),\n    (e) => e.id,\n  );\n\n  validateEvents(sortedEvents);\n\n  const initEvent = filterEvents(sortedEvents, \"Initialized\")[0];\n  const activityRegisteredEvents = filterEvents(events, \"ActivityRegistered\");\n  const { transitionDuration } = initEvent;\n\n  type ActivityMetadata = {\n    poppedBy: PoppedEvent | ReplacedEvent | null;\n  };\n\n  const activities: Array<\n    Activity & {\n      metadata: ActivityMetadata;\n    }\n  > = [];\n\n  sortedEvents.forEach((event) => {\n    switch (event.name) {\n      case \"Pushed\": {\n        const transitionState: ActivityTransitionState =\n          event.skipEnterActiveState ||\n          now - event.eventDate >= transitionDuration\n            ? \"enter-done\"\n            : \"enter-active\";\n\n        activities.push({\n          id: event.activityId,\n          name: event.activityName,\n          transitionState,\n          params: event.activityParams,\n          context: event.activityContext,\n          steps: [\n            {\n              id: event.activityId,\n              params: event.activityParams,\n              pushedBy: event,\n            },\n          ],\n          pushedBy: event,\n          metadata: {\n            poppedBy: null,\n          },\n          isTop: false,\n          isActive: false,\n          zIndex: -1,\n        });\n\n        break;\n      }\n      case \"Replaced\": {\n        const alreadyExistingActivityIndex = last(\n          findIndices(\n            activities,\n            (activity) => activity.id === event.activityId,\n          ),\n        );\n        const alreadyExistingActivity =\n          typeof alreadyExistingActivityIndex === \"number\"\n            ? activities[alreadyExistingActivityIndex]\n            : undefined;\n\n        const transitionState: ActivityTransitionState = alreadyExistingActivity\n          ? alreadyExistingActivity.transitionState\n          : event.skipEnterActiveState ||\n            now - event.eventDate >= transitionDuration\n          ? \"enter-done\"\n          : \"enter-active\";\n\n        const newActivity = {\n          id: event.activityId,\n          name: event.activityName,\n          transitionState,\n          params: event.activityParams,\n          context: event.activityContext,\n          steps: [\n            {\n              id: event.activityId,\n              params: event.activityParams,\n              pushedBy: event,\n            },\n          ],\n          pushedBy: event,\n          metadata: {\n            poppedBy: null,\n          },\n          isTop: false,\n          isActive: false,\n          zIndex: -1,\n        };\n\n        if (typeof alreadyExistingActivityIndex === \"number\") {\n          activities[alreadyExistingActivityIndex] = newActivity;\n        } else {\n          const topActivity = activities\n            .filter((activity) => activity.metadata.poppedBy === null)\n            .sort((a1, a2) => a2.pushedBy.eventDate - a1.pushedBy.eventDate)[0];\n\n          activities.push(newActivity);\n\n          if (topActivity && transitionState === \"enter-done\") {\n            topActivity.metadata.poppedBy = event;\n            topActivity.transitionState = \"exit-done\";\n          }\n        }\n\n        break;\n      }\n      case \"Popped\": {\n        const targetActivity = activities\n          .filter((_, i) => i > 0)\n          .filter((activity) => activity.metadata.poppedBy === null)\n          .sort((a1, a2) => a2.pushedBy.eventDate - a1.pushedBy.eventDate)[0];\n\n        const transitionState: ActivityTransitionState =\n          event.skipExitActiveState ||\n          now - event.eventDate >= transitionDuration\n            ? \"exit-done\"\n            : \"exit-active\";\n\n        if (targetActivity) {\n          targetActivity.metadata.poppedBy = event;\n          targetActivity.transitionState = transitionState;\n\n          if (transitionState === \"exit-done\") {\n            targetActivity.params = targetActivity.steps[0].params;\n            targetActivity.steps = [targetActivity.steps[0]];\n          }\n        }\n\n        break;\n      }\n      case \"StepPushed\": {\n        const targetActivity = activities\n          .filter((activity) => activity.metadata.poppedBy === null)\n          .sort((a1, a2) => a2.pushedBy.eventDate - a1.pushedBy.eventDate)[0];\n\n        if (targetActivity) {\n          const newRoute = {\n            id: event.stepId,\n            params: event.stepParams,\n            pushedBy: event,\n          };\n\n          targetActivity.params = event.stepParams;\n          targetActivity.steps = targetActivity.steps\n            ? [...targetActivity.steps, newRoute]\n            : [newRoute];\n        }\n        break;\n      }\n      case \"StepReplaced\": {\n        const targetActivity = activities\n          .filter((activity) => activity.metadata.poppedBy === null)\n          .sort((a1, a2) => a2.pushedBy.eventDate - a1.pushedBy.eventDate)[0];\n\n        if (targetActivity) {\n          targetActivity.params = event.stepParams;\n\n          const newRoute = {\n            id: event.stepId,\n            params: event.stepParams,\n            pushedBy: event,\n          };\n\n          targetActivity.steps.pop();\n          targetActivity.steps = [...targetActivity.steps, newRoute];\n        }\n        break;\n      }\n      case \"StepPopped\": {\n        const targetActivity = activities\n          .filter((activity) => activity.metadata.poppedBy === null)\n          .sort((a1, a2) => a2.pushedBy.eventDate - a1.pushedBy.eventDate)[0];\n\n        if (targetActivity && targetActivity.steps.length > 1) {\n          targetActivity.steps.pop();\n\n          const beforeActivityParams = last(targetActivity.steps)?.params;\n\n          if (beforeActivityParams) {\n            targetActivity.params = beforeActivityParams;\n          }\n        }\n\n        break;\n      }\n      default: {\n        break;\n      }\n    }\n  });\n\n  const uniqActivities = uniqBy(activities, (activity) => activity.id);\n\n  const visibleActivities = uniqActivities.filter(\n    (activity) =>\n      activity.transitionState === \"enter-active\" ||\n      activity.transitionState === \"enter-done\" ||\n      activity.transitionState === \"exit-active\",\n  );\n  const enteredActivities = visibleActivities.filter(\n    (activity) =>\n      activity.transitionState === \"enter-active\" ||\n      activity.transitionState === \"enter-done\",\n  );\n\n  const lastVisibleActivity = visibleActivities[visibleActivities.length - 1];\n  const lastEnteredActivity = enteredActivities[enteredActivities.length - 1];\n\n  const globalTransitionState = activities.find(\n    (activity) =>\n      activity.transitionState === \"enter-active\" ||\n      activity.transitionState === \"exit-active\",\n  )\n    ? \"loading\"\n    : \"idle\";\n\n  const output: AggregateOutput = {\n    activities: uniqActivities\n      .map((activity) => ({\n        id: activity.id,\n        name: activity.name,\n        transitionState: activity.transitionState,\n        params: activity.params,\n        steps: activity.steps,\n        pushedBy: activity.pushedBy,\n        isTop: lastVisibleActivity?.id === activity.id,\n        isActive: lastEnteredActivity?.id === activity.id,\n        zIndex: visibleActivities.findIndex(({ id }) => id === activity.id),\n        ...(activity.context\n          ? {\n              context: activity.context,\n            }\n          : null),\n      }))\n      .sort((a, b) => compareBy(a, b, (activity) => activity.id)),\n    registeredActivities: activityRegisteredEvents.map((event) => ({\n      name: event.activityName,\n      ...(event.activityParamsSchema\n        ? {\n            paramsSchema: event.activityParamsSchema,\n          }\n        : null),\n    })),\n    transitionDuration,\n    globalTransitionState,\n  };\n\n  return output;\n}\n", "/* eslint-disable no-use-before-define */\n\nimport isEqual from \"react-fast-compare\";\n\nimport { aggregate } from \"./aggregate\";\nimport type { AggregateOutput } from \"./AggregateOutput\";\nimport type { Effect } from \"./Effect\";\nimport type { DomainEvent } from \"./event-types\";\nimport type { BaseDomainEvent } from \"./event-types/_base\";\nimport { makeEvent } from \"./event-utils\";\nimport type { StackflowActions, StackflowPlugin } from \"./interfaces\";\nimport { produceEffects } from \"./produceEffects\";\nimport { once } from \"./utils\";\n\nconst SECOND = 1000;\n\n// 60FPS\nconst INTERVAL_MS = SECOND / 60;\n\nexport type CreateCoreStoreOptions = {\n  initialEvents: DomainEvent[];\n  plugins: StackflowPlugin[];\n};\n\nexport type CreateCoreStoreOutput = {\n  actions: StackflowActions;\n  init: () => void;\n  subscribe: (listener: () => void) => () => void;\n};\n\nexport function createCoreStore(\n  options: CreateCoreStoreOptions,\n): CreateCoreStoreOutput {\n  const events: {\n    value: DomainEvent[];\n  } = {\n    value: [...options.initialEvents],\n  };\n  const stack = {\n    value: aggregate(events.value, new Date().getTime()),\n  };\n\n  const storeListeners: Array<() => void> = [];\n\n  const defaultPlugin: StackflowPlugin = () => ({\n    key: \"@stackflow/core\",\n    onChanged() {\n      storeListeners.forEach((listener) => listener());\n    },\n  });\n\n  const pluginInstances: ReturnType<StackflowPlugin>[] = [\n    defaultPlugin(),\n    ...options.plugins.map((plugin) => plugin()),\n  ];\n\n  const setStackValue = (nextStackValue: AggregateOutput) => {\n    const effects = produceEffects(stack.value, nextStackValue);\n\n    stack.value = nextStackValue;\n\n    triggerPostEffectHooks(effects, pluginInstances);\n  };\n\n  const dispatchEvent: StackflowActions[\"dispatchEvent\"] = (name, params) => {\n    const newEvent = makeEvent(name, params);\n\n    const nextStackValue = aggregate(\n      [...events.value, newEvent],\n      new Date().getTime(),\n    );\n\n    events.value.push(newEvent);\n    setStackValue(nextStackValue);\n\n    const interval = setInterval(() => {\n      const nextStackValue = aggregate(events.value, new Date().getTime());\n\n      if (!isEqual(stack.value, nextStackValue)) {\n        setStackValue(nextStackValue);\n      }\n\n      if (nextStackValue.globalTransitionState === \"idle\") {\n        clearInterval(interval);\n      }\n    }, INTERVAL_MS);\n  };\n\n  function triggerPreEffectHooks<T extends DomainEvent>(\n    event: T,\n    plugins: ReturnType<StackflowPlugin>[],\n  ): {\n    isPrevented: boolean;\n    overriddenParams: Omit<T, keyof BaseDomainEvent>;\n  } {\n    let isPrevented = false;\n    let nextEvent: T = {\n      ...event,\n    };\n\n    function toParams(event: T): Omit<T, keyof BaseDomainEvent> {\n      const params: Partial<BaseDomainEvent> & Omit<T, keyof BaseDomainEvent> =\n        { ...event };\n\n      // delete params.id;\n      // delete params.eventDate;\n      delete params.name;\n\n      return params;\n    }\n\n    const preventDefault = () => {\n      isPrevented = true;\n    };\n    const overrideActionParams = (nextActionParams: any) => {\n      nextEvent = {\n        ...nextEvent,\n        ...nextActionParams,\n      };\n    };\n\n    plugins.forEach((plugin) => {\n      switch (nextEvent.name) {\n        case \"Pushed\": {\n          plugin.onBeforePush?.({\n            actionParams: {\n              ...nextEvent,\n            },\n            actions: {\n              ...actions,\n              preventDefault,\n              overrideActionParams,\n            },\n          });\n          break;\n        }\n        case \"Replaced\": {\n          plugin.onBeforeReplace?.({\n            actionParams: {\n              ...nextEvent,\n            },\n            actions: {\n              ...actions,\n              preventDefault,\n              overrideActionParams,\n            },\n          });\n          break;\n        }\n        case \"Popped\": {\n          plugin.onBeforePop?.({\n            actionParams: {\n              ...nextEvent,\n            },\n            actions: {\n              ...actions,\n              preventDefault,\n              overrideActionParams,\n            },\n          });\n          break;\n        }\n        case \"StepPushed\": {\n          plugin.onBeforeStepPush?.({\n            actionParams: {\n              ...nextEvent,\n            },\n            actions: {\n              ...actions,\n              preventDefault,\n              overrideActionParams,\n            },\n          });\n          break;\n        }\n        case \"StepReplaced\": {\n          plugin.onBeforeStepReplace?.({\n            actionParams: {\n              ...nextEvent,\n            },\n            actions: {\n              ...actions,\n              preventDefault,\n              overrideActionParams,\n            },\n          });\n          break;\n        }\n        case \"StepPopped\": {\n          plugin.onBeforeStepPop?.({\n            actionParams: {\n              ...nextEvent,\n            },\n            actions: {\n              ...actions,\n              preventDefault,\n              overrideActionParams,\n            },\n          });\n          break;\n        }\n        default:\n          break;\n      }\n    });\n\n    return {\n      isPrevented,\n      overriddenParams: toParams(nextEvent),\n    };\n  }\n\n  function triggerPostEffectHooks(\n    effects: Effect[],\n    plugins: ReturnType<StackflowPlugin>[],\n  ) {\n    effects.forEach((effect) => {\n      plugins.forEach((plugin) => {\n        switch (effect._TAG) {\n          case \"PUSHED\":\n            return plugin.onPushed?.({\n              actions,\n              effect,\n            });\n          case \"REPLACED\":\n            return plugin.onReplaced?.({\n              actions,\n              effect,\n            });\n          case \"POPPED\":\n            return plugin.onPopped?.({\n              actions,\n              effect,\n            });\n          case \"STEP_PUSHED\":\n            return plugin.onStepPushed?.({\n              actions,\n              effect,\n            });\n          case \"STEP_REPLACED\":\n            return plugin.onStepReplaced?.({\n              actions,\n              effect,\n            });\n          case \"STEP_POPPED\":\n            return plugin.onStepPopped?.({\n              actions,\n              effect,\n            });\n          case \"%SOMETHING_CHANGED%\":\n            return plugin.onChanged?.({\n              actions,\n              effect,\n            });\n          default:\n            return undefined;\n        }\n      });\n    });\n  }\n\n  const actions: StackflowActions = {\n    getStack() {\n      return stack.value;\n    },\n    dispatchEvent,\n    push(params) {\n      const { isPrevented, overriddenParams } = triggerPreEffectHooks(\n        makeEvent(\"Pushed\", params),\n        pluginInstances,\n      );\n\n      if (isPrevented) {\n        return;\n      }\n\n      dispatchEvent(\"Pushed\", overriddenParams);\n    },\n    replace(params) {\n      const { isPrevented, overriddenParams } = triggerPreEffectHooks(\n        makeEvent(\"Replaced\", params),\n        pluginInstances,\n      );\n\n      if (isPrevented) {\n        return;\n      }\n\n      dispatchEvent(\"Replaced\", overriddenParams);\n    },\n    pop(params) {\n      const { isPrevented, overriddenParams } = triggerPreEffectHooks(\n        makeEvent(\"Popped\", params ?? {}),\n        pluginInstances,\n      );\n\n      if (isPrevented) {\n        return;\n      }\n\n      dispatchEvent(\"Popped\", overriddenParams);\n    },\n    stepPush(params) {\n      const { isPrevented, overriddenParams } = triggerPreEffectHooks(\n        makeEvent(\"StepPushed\", params ?? {}),\n        pluginInstances,\n      );\n\n      if (isPrevented) {\n        return;\n      }\n\n      dispatchEvent(\"StepPushed\", overriddenParams);\n    },\n    stepReplace(params) {\n      const { isPrevented, overriddenParams } = triggerPreEffectHooks(\n        makeEvent(\"StepReplaced\", params ?? {}),\n        pluginInstances,\n      );\n\n      if (isPrevented) {\n        return;\n      }\n\n      dispatchEvent(\"StepReplaced\", overriddenParams);\n    },\n    stepPop(params) {\n      const { isPrevented, overriddenParams } = triggerPreEffectHooks(\n        makeEvent(\"StepPopped\", params ?? {}),\n        pluginInstances,\n      );\n\n      if (isPrevented) {\n        return;\n      }\n\n      dispatchEvent(\"StepPopped\", overriddenParams);\n    },\n  };\n\n  return {\n    actions,\n    init: once(() => {\n      pluginInstances.forEach((pluginInstance) => {\n        pluginInstance.onInit?.({\n          actions,\n        });\n      });\n    }),\n    subscribe(listener) {\n      storeListeners.push(listener);\n\n      return function dispose() {\n        const listenerIndex = storeListeners.findIndex((l) => l === listener);\n\n        if (listenerIndex > -1) {\n          storeListeners.splice(listenerIndex, 1);\n        }\n      };\n    },\n  };\n}\n", "import isEqual from \"react-fast-compare\";\n\nimport type { AggregateOutput } from \"./AggregateOutput\";\nimport type { Effect } from \"./Effect\";\nimport { omit } from \"./utils\";\n\nexport function produceEffects(\n  prevOutput: AggregateOutput,\n  nextOutput: AggregateOutput,\n): Effect[] {\n  const output: Effect[] = [];\n\n  const somethingChanged = !isEqual(prevOutput, nextOutput);\n\n  if (somethingChanged) {\n    output.push({\n      _TAG: \"%SOMETHING_CHANGED%\",\n    });\n  }\n\n  for (\n    let i = 0;\n    i < Math.max(prevOutput.activities.length, nextOutput.activities.length);\n    i += 1\n  ) {\n    const prevActivity = prevOutput.activities[i];\n    const nextActivity = nextOutput.activities[i];\n\n    const isPrevActivityPopped =\n      prevActivity?.transitionState === \"exit-done\" ||\n      prevActivity?.transitionState === \"exit-active\";\n    const isNextActivityPushed =\n      nextActivity?.transitionState === \"enter-active\" ||\n      nextActivity?.transitionState === \"enter-done\";\n\n    if (prevActivity && nextActivity && prevActivity.id === nextActivity.id) {\n      for (\n        let j = 0;\n        j <\n        Math.max(\n          (prevActivity.steps ?? []).length,\n          (nextActivity.steps ?? []).length,\n        );\n        j += 1\n      ) {\n        const prevStep = prevActivity.steps[j];\n        const nextStep = nextActivity.steps[j];\n\n        if (!prevStep && nextStep) {\n          output.push({\n            _TAG: \"STEP_PUSHED\",\n            activity: nextActivity,\n            step: nextStep,\n          });\n        } else if (prevStep && !nextStep) {\n          output.push({\n            _TAG: \"STEP_POPPED\",\n            activity: nextActivity,\n          });\n        } else if (\n          prevActivity.steps.length === nextActivity.steps.length &&\n          prevStep.id !== nextStep.id\n        ) {\n          output.push({\n            _TAG: \"STEP_REPLACED\",\n            activity: nextActivity,\n            step: nextStep,\n          });\n        }\n      }\n    }\n\n    if (!prevActivity && nextActivity) {\n      output.push({\n        _TAG: nextActivity.pushedBy.name === \"Pushed\" ? \"PUSHED\" : \"REPLACED\",\n        activity: nextActivity,\n      });\n    } else if (isPrevActivityPopped && isNextActivityPushed) {\n      output.push({\n        _TAG: nextActivity.pushedBy.name === \"Pushed\" ? \"PUSHED\" : \"REPLACED\",\n        activity: nextActivity,\n      });\n    } else if (\n      prevActivity &&\n      nextActivity &&\n      prevActivity.id === nextActivity.id &&\n      !isEqual(\n        omit(prevActivity, [\"isActive\", \"isTop\", \"transitionState\", \"zIndex\"]),\n        omit(nextActivity, [\"isActive\", \"isTop\", \"transitionState\", \"zIndex\"]),\n      ) &&\n      nextActivity.pushedBy.name === \"Replaced\"\n    ) {\n      output.push({\n        _TAG: \"REPLACED\",\n        activity: nextActivity,\n      });\n    }\n  }\n\n  for (\n    let j =\n      Math.max(prevOutput.activities.length, nextOutput.activities.length) - 1;\n    j >= 0;\n    j -= 1\n  ) {\n    const prevActivity = prevOutput.activities[j];\n    const nextActivity = nextOutput.activities[j];\n\n    const isPrevActivityPushed =\n      prevActivity?.transitionState === \"enter-done\" ||\n      prevActivity?.transitionState === \"enter-active\";\n    const isNextActivityPopped =\n      nextActivity?.transitionState === \"exit-active\" ||\n      nextActivity?.transitionState === \"exit-done\";\n\n    if (isPrevActivityPushed && isNextActivityPopped) {\n      output.push({\n        _TAG: \"POPPED\",\n        activity: nextActivity,\n      });\n    }\n  }\n\n  return output;\n}\n"],
  "mappings": "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",
  "names": ["src_exports", "__export", "aggregate", "createCoreStore", "id", "makeEvent", "produceEffects", "__toCommonJS", "filterEvents", "events", "eventName", "e", "compareBy", "a", "b", "selector", "$a", "$b", "findIndices", "arr", "compare", "e", "i", "output", "counterMap", "id", "t", "prevCounter", "nextCounter", "last", "arr", "omit", "obj", "fields", "output", "__spreadValues", "field", "once", "cb", "called", "uniqBy", "arr", "by", "valueMap", "item", "key", "exists", "makeEvent", "name", "parameters", "__spreadProps", "__spreadValues", "id", "validateEvents", "events", "initEvents", "filterEvents", "activityRegisteredEvents", "pushedEvents", "registeredActivityNames", "e", "aggregate", "events", "now", "sortedEvents", "uniqBy", "a", "b", "compareBy", "e", "validateEvents", "initEvent", "filterEvents", "activityRegisteredEvents", "transitionDuration", "activities", "event", "_a", "transitionState", "alreadyExistingActivityIndex", "last", "findIndices", "activity", "alreadyExistingActivity", "newActivity", "topActivity", "a1", "a2", "targetActivity", "_", "i", "newRoute", "beforeActivityParams", "uniqActivities", "visibleActivities", "enteredActivities", "lastVisibleActivity", "lastEnteredActivity", "globalTransitionState", "__spreadValues", "id", "import_react_fast_compare", "import_react_fast_compare", "produceEffects", "prevOutput", "nextOutput", "_a", "_b", "output", "isEqual", "i", "prevActivity", "nextActivity", "isPrevActivityPopped", "isNextActivityPushed", "j", "prevStep", "nextStep", "omit", "isPrevActivityPushed", "isNextActivityPopped", "SECOND", "INTERVAL_MS", "createCoreStore", "options", "events", "stack", "aggregate", "storeListeners", "pluginInstances", "listener", "plugin", "setStackValue", "nextStackValue", "effects", "produceEffects", "triggerPostEffectHooks", "dispatchEvent", "name", "params", "newEvent", "makeEvent", "interval", "isEqual", "triggerPreEffectHooks", "event", "plugins", "isPrevented", "nextEvent", "__spreadValues", "toParams", "preventDefault", "overrideActionParams", "nextActionParams", "_a", "_b", "_c", "_d", "_e", "_f", "__spreadProps", "actions", "effect", "_g", "overriddenParams", "once", "pluginInstance", "listenerIndex", "l"]
}
