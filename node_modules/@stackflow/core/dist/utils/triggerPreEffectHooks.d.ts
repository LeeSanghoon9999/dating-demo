import type { DomainEvent } from "../event-types";
import type { BaseDomainEvent } from "../event-types/_base";
import type { StackflowPlugin } from "../interfaces";
import type { StackflowActions } from "../interfaces";
type PreEffectHookResult<T> = {
    isPrevented: boolean;
    nextActionParams: T;
};
type EventNameToParams<K extends ActionName> = Omit<Extract<DomainEvent, {
    name: K;
}>, keyof BaseDomainEvent>;
type ActionName = Exclude<DomainEvent["name"], "Initialized" | "ActivityRegistered">;
export declare function triggerPreEffectHook<K extends ActionName>(actionName: K, actionParams: EventNameToParams<K>, pluginInstances: ReturnType<StackflowPlugin>[], actions: StackflowActions): PreEffectHookResult<EventNameToParams<K>>;
export {};
//# sourceMappingURL=triggerPreEffectHooks.d.ts.map