"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var stackflow_exports = {};
__export(stackflow_exports, {
  stackflow: () => stackflow
});
module.exports = __toCommonJS(stackflow_exports);
var import_jsx_runtime = require("react/jsx-runtime");
var import_core = require("@stackflow/core");
var import_react = require("react");
var import_MainRenderer = __toESM(require("../__internal__/MainRenderer"));
var import_activity = require("../__internal__/activity");
var import_core2 = require("../__internal__/core");
var import_plugins = require("../__internal__/plugins");
var import_utils = require("../__internal__/utils");
var import_useActions = require("./useActions");
var import_useStepActions = require("./useStepActions");
function parseActionOptions(options) {
  if (!options) {
    return { skipActiveState: false };
  }
  const isNullableAnimateOption = options.animate == null;
  if (isNullableAnimateOption) {
    return { skipActiveState: false };
  }
  return { skipActiveState: !options.animate };
}
function stackflow(options) {
  var _a;
  const plugins = ((_a = options.plugins) != null ? _a : []).flat(Number.POSITIVE_INFINITY).map((p) => p);
  const activityComponentMap = Object.entries(options.activities).reduce(
    (acc, [key, Activity]) => __spreadProps(__spreadValues({}, acc), {
      [key]: "component" in Activity ? (0, import_react.memo)(Activity.component) : (0, import_react.memo)(Activity)
    }),
    {}
  );
  const enoughPastTime = () => (/* @__PURE__ */ new Date()).getTime() - options.transitionDuration * 2;
  const staticCoreStore = (0, import_core.makeCoreStore)({
    initialEvents: [
      (0, import_core.makeEvent)("Initialized", {
        transitionDuration: options.transitionDuration,
        eventDate: enoughPastTime()
      }),
      ...Object.entries(options.activities).map(
        ([activityName, Activity]) => (0, import_core.makeEvent)("ActivityRegistered", __spreadValues({
          activityName,
          eventDate: enoughPastTime()
        }, "component" in Activity ? {
          activityParamsSchema: Activity.paramsSchema
        } : null))
      )
    ],
    plugins: []
  });
  const [getCoreStore, setCoreStore] = (0, import_utils.makeRef)();
  const Stack = (0, import_react.memo)((props) => {
    const coreStore = (0, import_react.useMemo)(() => {
      const prevCoreStore = getCoreStore();
      if ((0, import_utils.isBrowser)() && prevCoreStore) {
        return prevCoreStore;
      }
      const initialPushedEventsByOption = options.initialActivity ? [
        (0, import_core.makeEvent)("Pushed", {
          activityId: (0, import_activity.makeActivityId)(),
          activityName: options.initialActivity(),
          activityParams: {},
          eventDate: enoughPastTime(),
          skipEnterActiveState: false
        })
      ] : [];
      const store = (0, import_core.makeCoreStore)({
        initialEvents: [
          ...staticCoreStore.pullEvents(),
          ...initialPushedEventsByOption
        ],
        initialContext: props.initialContext,
        plugins,
        handlers: {
          onInitialActivityIgnored: (initialPushedEvents) => {
            console.warn(
              `Stackflow - Some plugin overrides an "initialActivity" option. The "initialActivity" option you set to "${initialPushedEvents[0].activityName}" in the "stackflow" is ignored.`
            );
          },
          onInitialActivityNotFound: () => {
            console.warn(
              "Stackflow - There is no initial activity. If you want to set the initial activity, add the `initialActivity` option of the `stackflow()` function or add a plugin that sets the initial activity. (e.g. `@stackflow/plugin-history-sync`)"
            );
          }
        }
      });
      if ((0, import_utils.isBrowser)()) {
        store.init();
        setCoreStore(store);
      }
      return store;
    }, []);
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_plugins.PluginsProvider, { value: coreStore.pluginInstances, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_core2.CoreProvider, { coreStore, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
      import_MainRenderer.default,
      {
        activityComponentMap,
        initialContext: props.initialContext
      }
    ) }) });
  });
  Stack.displayName = "Stack";
  return {
    activities: options.activities,
    Stack,
    useFlow: import_useActions.useActions,
    useStepFlow: import_useStepActions.useStepActions,
    addActivity(activity) {
      if (getCoreStore()) {
        console.warn(
          "Stackflow - `addActivity()` API cannot be called after a `<Stack />` component has been rendered"
        );
        return;
      }
      activityComponentMap[activity.name] = (0, import_react.memo)(activity.component);
      staticCoreStore.actions.dispatchEvent("ActivityRegistered", {
        activityName: activity.name,
        activityParamsSchema: activity.paramsSchema,
        eventDate: enoughPastTime()
      });
    },
    addPlugin(plugin) {
      if (getCoreStore()) {
        console.warn(
          "Stackflow - `addPlugin()` API cannot be called after a `<Stack />` component has been rendered"
        );
        return;
      }
      [plugin].flat(Number.POSITIVE_INFINITY).map((p) => p).forEach((p) => {
        plugins.push(p);
      });
    },
    actions: {
      getStack() {
        var _a2, _b;
        return (_b = (_a2 = getCoreStore()) == null ? void 0 : _a2.actions.getStack()) != null ? _b : staticCoreStore.actions.getStack();
      },
      dispatchEvent(name, parameters) {
        var _a2;
        return (_a2 = getCoreStore()) == null ? void 0 : _a2.actions.dispatchEvent(name, parameters);
      },
      push(activityName, activityParams, options2) {
        var _a2;
        const activityId = (0, import_activity.makeActivityId)();
        (_a2 = getCoreStore()) == null ? void 0 : _a2.actions.push({
          activityId,
          activityName,
          activityParams,
          skipEnterActiveState: parseActionOptions(options2).skipActiveState
        });
        return {
          activityId
        };
      },
      replace(activityName, activityParams, options2) {
        var _a2, _b, _c;
        const activityId = (_a2 = options2 == null ? void 0 : options2.activityId) != null ? _a2 : (0, import_activity.makeActivityId)();
        (_c = getCoreStore()) == null ? void 0 : _c.actions.replace({
          activityId: (_b = options2 == null ? void 0 : options2.activityId) != null ? _b : (0, import_activity.makeActivityId)(),
          activityName,
          activityParams,
          skipEnterActiveState: parseActionOptions(options2).skipActiveState
        });
        return {
          activityId
        };
      },
      pop(count, options2) {
        var _a2;
        let _count = 1;
        let _options = {};
        if (typeof count === "object") {
          _options = __spreadValues({}, count);
        }
        if (typeof count === "number") {
          _count = count;
        }
        if (options2) {
          _options = __spreadValues({}, options2);
        }
        for (let i = 0; i < _count; i += 1) {
          (_a2 = getCoreStore()) == null ? void 0 : _a2.actions.pop({
            skipExitActiveState: i === 0 ? parseActionOptions(_options).skipActiveState : true
          });
        }
      },
      stepPush(params, options2) {
        var _a2, _b;
        const activities = (_a2 = getCoreStore()) == null ? void 0 : _a2.actions.getStack().activities;
        const findTargetActivity = (options2 == null ? void 0 : options2.targetActivityId) ? (0, import_activity.findActivityById)(options2.targetActivityId) : import_activity.findLatestActiveActivity;
        const targetActivity = activities && findTargetActivity(activities);
        if (!targetActivity)
          throw new Error("The target activity is not found.");
        const stepParams = typeof params === "function" ? params(targetActivity.params) : params;
        const stepId = (0, import_activity.makeStepId)();
        return (_b = getCoreStore()) == null ? void 0 : _b.actions.stepPush({
          stepId,
          stepParams,
          targetActivityId: options2 == null ? void 0 : options2.targetActivityId
        });
      },
      stepReplace(params, options2) {
        var _a2, _b;
        const activities = (_a2 = getCoreStore()) == null ? void 0 : _a2.actions.getStack().activities;
        const findTargetActivity = (options2 == null ? void 0 : options2.targetActivityId) ? (0, import_activity.findActivityById)(options2.targetActivityId) : import_activity.findLatestActiveActivity;
        const targetActivity = activities && findTargetActivity(activities);
        if (!targetActivity)
          throw new Error("The target activity is not found.");
        const stepParams = typeof params === "function" ? params(targetActivity.params) : params;
        const stepId = (0, import_activity.makeStepId)();
        return (_b = getCoreStore()) == null ? void 0 : _b.actions.stepReplace({
          stepId,
          stepParams,
          targetActivityId: options2 == null ? void 0 : options2.targetActivityId
        });
      },
      stepPop(options2) {
        var _a2;
        return (_a2 = getCoreStore()) == null ? void 0 : _a2.actions.stepPop({
          targetActivityId: options2 == null ? void 0 : options2.targetActivityId
        });
      }
    }
  };
}
