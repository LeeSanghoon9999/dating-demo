var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));

// src/stable/stackflow.tsx
import { makeCoreStore, makeEvent } from "@stackflow/core";
import { memo, useMemo } from "react";
import MainRenderer from "../__internal__/MainRenderer.mjs";
import {
  findActivityById,
  findLatestActiveActivity,
  makeActivityId,
  makeStepId
} from "../__internal__/activity/index.mjs";
import { CoreProvider } from "../__internal__/core/index.mjs";
import { PluginsProvider } from "../__internal__/plugins/index.mjs";
import { isBrowser, makeRef } from "../__internal__/utils/index.mjs";
import { useActions } from "./useActions.mjs";
import { useStepActions } from "./useStepActions.mjs";
import { jsx } from "react/jsx-runtime";
function parseActionOptions(options) {
  if (!options) {
    return { skipActiveState: false };
  }
  const isNullableAnimateOption = options.animate == null;
  if (isNullableAnimateOption) {
    return { skipActiveState: false };
  }
  return { skipActiveState: !options.animate };
}
function stackflow(options) {
  var _a;
  const plugins = ((_a = options.plugins) != null ? _a : []).flat(Number.POSITIVE_INFINITY).map((p) => p);
  const activityComponentMap = Object.entries(options.activities).reduce(
    (acc, [key, Activity]) => __spreadProps(__spreadValues({}, acc), {
      [key]: "component" in Activity ? memo(Activity.component) : memo(Activity)
    }),
    {}
  );
  const enoughPastTime = () => (/* @__PURE__ */ new Date()).getTime() - options.transitionDuration * 2;
  const staticCoreStore = makeCoreStore({
    initialEvents: [
      makeEvent("Initialized", {
        transitionDuration: options.transitionDuration,
        eventDate: enoughPastTime()
      }),
      ...Object.entries(options.activities).map(
        ([activityName, Activity]) => makeEvent("ActivityRegistered", __spreadValues({
          activityName,
          eventDate: enoughPastTime()
        }, "component" in Activity ? {
          activityParamsSchema: Activity.paramsSchema
        } : null))
      )
    ],
    plugins: []
  });
  const [getCoreStore, setCoreStore] = makeRef();
  const Stack = memo((props) => {
    const coreStore = useMemo(() => {
      const prevCoreStore = getCoreStore();
      if (isBrowser() && prevCoreStore) {
        return prevCoreStore;
      }
      const initialPushedEventsByOption = options.initialActivity ? [
        makeEvent("Pushed", {
          activityId: makeActivityId(),
          activityName: options.initialActivity(),
          activityParams: {},
          eventDate: enoughPastTime(),
          skipEnterActiveState: false
        })
      ] : [];
      const store = makeCoreStore({
        initialEvents: [
          ...staticCoreStore.pullEvents(),
          ...initialPushedEventsByOption
        ],
        initialContext: props.initialContext,
        plugins,
        handlers: {
          onInitialActivityIgnored: (initialPushedEvents) => {
            console.warn(
              `Stackflow - Some plugin overrides an "initialActivity" option. The "initialActivity" option you set to "${initialPushedEvents[0].activityName}" in the "stackflow" is ignored.`
            );
          },
          onInitialActivityNotFound: () => {
            console.warn(
              "Stackflow - There is no initial activity. If you want to set the initial activity, add the `initialActivity` option of the `stackflow()` function or add a plugin that sets the initial activity. (e.g. `@stackflow/plugin-history-sync`)"
            );
          }
        }
      });
      if (isBrowser()) {
        store.init();
        setCoreStore(store);
      }
      return store;
    }, []);
    return /* @__PURE__ */ jsx(PluginsProvider, { value: coreStore.pluginInstances, children: /* @__PURE__ */ jsx(CoreProvider, { coreStore, children: /* @__PURE__ */ jsx(
      MainRenderer,
      {
        activityComponentMap,
        initialContext: props.initialContext
      }
    ) }) });
  });
  Stack.displayName = "Stack";
  return {
    activities: options.activities,
    Stack,
    useFlow: useActions,
    useStepFlow: useStepActions,
    addActivity(activity) {
      if (getCoreStore()) {
        console.warn(
          "Stackflow - `addActivity()` API cannot be called after a `<Stack />` component has been rendered"
        );
        return;
      }
      activityComponentMap[activity.name] = memo(activity.component);
      staticCoreStore.actions.dispatchEvent("ActivityRegistered", {
        activityName: activity.name,
        activityParamsSchema: activity.paramsSchema,
        eventDate: enoughPastTime()
      });
    },
    addPlugin(plugin) {
      if (getCoreStore()) {
        console.warn(
          "Stackflow - `addPlugin()` API cannot be called after a `<Stack />` component has been rendered"
        );
        return;
      }
      [plugin].flat(Number.POSITIVE_INFINITY).map((p) => p).forEach((p) => {
        plugins.push(p);
      });
    },
    actions: {
      getStack() {
        var _a2, _b;
        return (_b = (_a2 = getCoreStore()) == null ? void 0 : _a2.actions.getStack()) != null ? _b : staticCoreStore.actions.getStack();
      },
      dispatchEvent(name, parameters) {
        var _a2;
        return (_a2 = getCoreStore()) == null ? void 0 : _a2.actions.dispatchEvent(name, parameters);
      },
      push(activityName, activityParams, options2) {
        var _a2;
        const activityId = makeActivityId();
        (_a2 = getCoreStore()) == null ? void 0 : _a2.actions.push({
          activityId,
          activityName,
          activityParams,
          skipEnterActiveState: parseActionOptions(options2).skipActiveState
        });
        return {
          activityId
        };
      },
      replace(activityName, activityParams, options2) {
        var _a2, _b, _c;
        const activityId = (_a2 = options2 == null ? void 0 : options2.activityId) != null ? _a2 : makeActivityId();
        (_c = getCoreStore()) == null ? void 0 : _c.actions.replace({
          activityId: (_b = options2 == null ? void 0 : options2.activityId) != null ? _b : makeActivityId(),
          activityName,
          activityParams,
          skipEnterActiveState: parseActionOptions(options2).skipActiveState
        });
        return {
          activityId
        };
      },
      pop(count, options2) {
        var _a2;
        let _count = 1;
        let _options = {};
        if (typeof count === "object") {
          _options = __spreadValues({}, count);
        }
        if (typeof count === "number") {
          _count = count;
        }
        if (options2) {
          _options = __spreadValues({}, options2);
        }
        for (let i = 0; i < _count; i += 1) {
          (_a2 = getCoreStore()) == null ? void 0 : _a2.actions.pop({
            skipExitActiveState: i === 0 ? parseActionOptions(_options).skipActiveState : true
          });
        }
      },
      stepPush(params, options2) {
        var _a2, _b;
        const activities = (_a2 = getCoreStore()) == null ? void 0 : _a2.actions.getStack().activities;
        const findTargetActivity = (options2 == null ? void 0 : options2.targetActivityId) ? findActivityById(options2.targetActivityId) : findLatestActiveActivity;
        const targetActivity = activities && findTargetActivity(activities);
        if (!targetActivity)
          throw new Error("The target activity is not found.");
        const stepParams = typeof params === "function" ? params(targetActivity.params) : params;
        const stepId = makeStepId();
        return (_b = getCoreStore()) == null ? void 0 : _b.actions.stepPush({
          stepId,
          stepParams,
          targetActivityId: options2 == null ? void 0 : options2.targetActivityId
        });
      },
      stepReplace(params, options2) {
        var _a2, _b;
        const activities = (_a2 = getCoreStore()) == null ? void 0 : _a2.actions.getStack().activities;
        const findTargetActivity = (options2 == null ? void 0 : options2.targetActivityId) ? findActivityById(options2.targetActivityId) : findLatestActiveActivity;
        const targetActivity = activities && findTargetActivity(activities);
        if (!targetActivity)
          throw new Error("The target activity is not found.");
        const stepParams = typeof params === "function" ? params(targetActivity.params) : params;
        const stepId = makeStepId();
        return (_b = getCoreStore()) == null ? void 0 : _b.actions.stepReplace({
          stepId,
          stepParams,
          targetActivityId: options2 == null ? void 0 : options2.targetActivityId
        });
      },
      stepPop(options2) {
        var _a2;
        return (_a2 = getCoreStore()) == null ? void 0 : _a2.actions.stepPop({
          targetActivityId: options2 == null ? void 0 : options2.targetActivityId
        });
      }
    }
  };
}
export {
  stackflow
};
