import type { ActivityRegisteredEvent, StackflowActions } from "@stackflow/core";
import type { ActivityComponentType } from "../__internal__/ActivityComponentType";
import type { StackflowReactPlugin } from "../__internal__/StackflowReactPlugin";
import type { BaseActivities } from "./BaseActivities";
import type { UseActionsOutputType } from "./useActions";
import type { UseStepActionsOutputType } from "./useStepActions";
export type StackComponentType = React.FC<{
    initialContext?: any;
}>;
type StackflowPluginsEntry<T extends BaseActivities> = StackflowReactPlugin<T> | StackflowPluginsEntry<T>[];
type NoInfer<T> = [T][T extends any ? 0 : never];
export type StackflowOptions<T extends BaseActivities> = {
    /**
     * Register activities used in your app
     */
    activities: T;
    /**
     * Transition duration for stack animation (millisecond)
     */
    transitionDuration: number;
    /**
     * Set the first activity to load at the bottom
     * (It can be overwritten by plugin)
     */
    initialActivity?: () => Extract<keyof NoInfer<T>, string>;
    /**
     * Inject stackflow plugins
     */
    plugins?: Array<StackflowPluginsEntry<NoInfer<T>>>;
};
export type StackflowOutput<T extends BaseActivities> = {
    /**
     * Return activities
     */
    activities: T;
    /**
     * Created `<Stack />` component
     */
    Stack: StackComponentType;
    /**
     * Created `useFlow()` hooks
     */
    useFlow: () => UseActionsOutputType<T>;
    /**
     * Created `useStepFlow()` hooks
     */
    useStepFlow: <K extends Extract<keyof T, string>>(activityName: K) => UseStepActionsOutputType<T[K] extends ActivityComponentType<infer U> | {
        component: ActivityComponentType<infer U>;
    } ? U : {}>;
    /**
     * Add activity imperatively
     */
    addActivity: (options: {
        name: string;
        component: ActivityComponentType<any>;
        paramsSchema?: ActivityRegisteredEvent["activityParamsSchema"];
    }) => void;
    /**
     * Add plugin imperatively
     */
    addPlugin: (plugin: StackflowPluginsEntry<T>) => void;
    /**
     * Created action triggers
     */
    actions: Pick<StackflowActions, "dispatchEvent" | "getStack"> & Pick<UseActionsOutputType<T>, "push" | "pop" | "replace"> & Pick<UseStepActionsOutputType<{}>, "stepPush" | "stepReplace" | "stepPop">;
};
/**
 * Make `<Stack />` component and `useFlow()` hooks that strictly typed with `activities`
 */
export declare function stackflow<T extends BaseActivities>(options: StackflowOptions<T>): StackflowOutput<T>;
export {};
//# sourceMappingURL=stackflow.d.ts.map