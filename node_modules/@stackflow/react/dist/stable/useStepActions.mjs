// src/stable/useStepActions.ts
import { useMemo } from "react";
import {
  findActivityById,
  findLatestActiveActivity,
  makeStepId
} from "../__internal__/activity/index.mjs";
import { useCoreActions } from "../__internal__/core/index.mjs";
import { useTransition } from "../__internal__/shims/index.mjs";
var useStepActions = () => {
  const coreActions = useCoreActions();
  const [pending] = useTransition();
  return useMemo(
    () => ({
      pending,
      stepPush(params, options) {
        const activities = coreActions == null ? void 0 : coreActions.getStack().activities;
        const findTargetActivity = (options == null ? void 0 : options.targetActivityId) ? findActivityById(options.targetActivityId) : findLatestActiveActivity;
        const targetActivity = activities && findTargetActivity(activities);
        if (!targetActivity)
          throw new Error("The target activity is not found.");
        const stepParams = typeof params === "function" ? params(targetActivity.params) : params;
        const stepId = makeStepId();
        coreActions == null ? void 0 : coreActions.stepPush({
          stepId,
          stepParams,
          targetActivityId: options == null ? void 0 : options.targetActivityId
        });
      },
      stepReplace(params, options) {
        const activities = coreActions == null ? void 0 : coreActions.getStack().activities;
        const findTargetActivity = (options == null ? void 0 : options.targetActivityId) ? findActivityById(options.targetActivityId) : findLatestActiveActivity;
        const targetActivity = activities && findTargetActivity(activities);
        if (!targetActivity)
          throw new Error("The target activity is not found.");
        const stepParams = typeof params === "function" ? params(targetActivity.params) : params;
        const stepId = makeStepId();
        coreActions == null ? void 0 : coreActions.stepReplace({
          stepId,
          stepParams,
          targetActivityId: options == null ? void 0 : options.targetActivityId
        });
      },
      stepPop(options) {
        coreActions == null ? void 0 : coreActions.stepPop({
          targetActivityId: options == null ? void 0 : options.targetActivityId
        });
      }
    }),
    [
      coreActions == null ? void 0 : coreActions.stepPush,
      coreActions == null ? void 0 : coreActions.stepReplace,
      coreActions == null ? void 0 : coreActions.stepPop,
      coreActions == null ? void 0 : coreActions.getStack,
      pending
    ]
  );
};
export {
  useStepActions
};
