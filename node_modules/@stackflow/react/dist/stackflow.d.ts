import type { StackflowActions } from "@stackflow/core";
import React from "react";
import type { BaseActivities } from "./BaseActivities";
import type { StackflowReactPlugin } from "./StackflowReactPlugin";
import type { UseActionsOutputType } from "./useActions";
import type { UseStepActions, UseStepActionsOutputType } from "./useStepActions";
export declare type StackComponentType = React.FC<{
    initialContext?: any;
}>;
declare type StackflowPluginsEntry<T extends BaseActivities> = StackflowReactPlugin<T> | StackflowPluginsEntry<T>[];
export declare type StackflowOptions<T extends BaseActivities> = {
    /**
     * Register activities used in your app
     */
    activities: T;
    /**
     * Transition duration for stack animation (millisecond)
     */
    transitionDuration: number;
    /**
     * Set the first activity to load at the bottom
     * (It can be overwritten by plugin)
     */
    initialActivity?: () => Extract<keyof T, string>;
    /**
     * Inject stackflow plugins
     */
    plugins?: Array<StackflowPluginsEntry<T>>;
};
export declare type StackflowOutput<T extends BaseActivities> = {
    /**
     * Created `<Stack />` component
     */
    Stack: StackComponentType;
    /**
     * Created `useFlow()` hooks
     */
    useFlow: () => UseActionsOutputType<T>;
    /**
     * Created `useStepFlow()` hooks
     */
    useStepFlow: UseStepActions<T>;
    /**
     * Created action triggers
     */
    actions: Pick<StackflowActions, "dispatchEvent" | "getStack"> & Pick<UseActionsOutputType<T>, "push" | "pop" | "replace"> & Pick<UseStepActionsOutputType<{}>, "stepPush" | "stepReplace" | "stepPop">;
    /**
     * Return activities
     */
    activities: T;
};
/**
 * Make `<Stack />` component and `useFlow()` hooks that strictly typed with `activities`
 */
export declare function stackflow<T extends BaseActivities>(options: StackflowOptions<T>): StackflowOutput<T>;
export {};
