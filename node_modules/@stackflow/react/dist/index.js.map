{
  "version": 3,
  "sources": ["../src/index.ts", "../src/activity/useActivity.ts", "../src/activity/ActivityProvider.tsx", "../src/utils/useMemoDeep.ts", "../src/activity/useActivityParams.ts", "../src/stack/useStack.ts", "../src/stack/StackProvider.tsx", "../src/stackflow.tsx", "../src/activity/makeActivityId.ts", "../src/activity/makeStepId.ts", "../src/core/CoreProvider.tsx", "../src/shims/useDeferredValue.ts", "../src/shims/useSyncExternalStore.ts", "../src/core/useCoreActions.ts", "../src/core/useCoreState.ts", "../src/MainRenderer.tsx", "../src/PluginRenderer.tsx", "../src/plugins/PluginsProvider.tsx", "../src/plugins/usePlugins.ts", "../src/useActions.ts", "../src/useStepActions.ts"],
  "sourcesContent": ["export * from \"./activity/ActivityComponentType\";\nexport * from \"./activity/useActivity\";\nexport * from \"./activity/useActivityParams\";\nexport * from \"./stack/useStack\";\nexport * from \"./stackflow\";\nexport * from \"./StackflowReactPlugin\";\nexport * from \"./useActions\";\nexport * from \"./useStepActions\";\n", "import { useContext } from \"react\";\n\nimport { ActivityContext } from \"./ActivityProvider\";\n\n/**\n * Get current activity state\n */\nexport const useActivity = () => useContext(ActivityContext);\n", "import type { Activity } from \"@stackflow/core\";\nimport React, { createContext } from \"react\";\n\nimport { useMemoDeep } from \"../utils\";\n\nexport const ActivityContext = createContext<Activity>(null as any);\n\ninterface ActivityProviderProps {\n  children: React.ReactNode;\n  value: Activity;\n}\nexport const ActivityProvider: React.FC<ActivityProviderProps> = ({\n  children,\n  value,\n}) => (\n  <ActivityContext.Provider value={useMemoDeep(value)}>\n    {children}\n  </ActivityContext.Provider>\n);\n", "import { useEffect, useRef } from \"react\";\nimport compare from \"react-fast-compare\";\n\nexport function useMemoDeep<T>(next: T) {\n  const previousRef = useRef(next);\n  const previous = previousRef.current;\n  const isEqual = compare(previous, next);\n\n  useEffect(() => {\n    if (!isEqual) {\n      previousRef.current = next;\n    }\n  });\n\n  return isEqual ? previous : next;\n}\n", "import { useContext } from \"react\";\n\nimport { ActivityContext } from \"./ActivityProvider\";\n\n/**\n * Get current activity parameters\n */\nexport function useActivityParams<\n  T extends { [key in keyof T]: string | undefined },\n>(): T {\n  return useContext(ActivityContext).params as T;\n}\n", "import { useContext } from \"react\";\n\nimport { StackContext } from \"./StackProvider\";\n\n/**\n * Get overall stack state\n */\nexport const useStack = () => useContext(StackContext);\n", "import type { AggregateOutput } from \"@stackflow/core\";\nimport React, { createContext } from \"react\";\n\nimport { useMemoDeep } from \"../utils\";\n\nexport const StackContext = createContext<AggregateOutput>(null as any);\n\ninterface StackProviderProps {\n  children: React.ReactNode;\n  value: AggregateOutput;\n}\nexport const StackProvider: React.FC<StackProviderProps> = ({\n  children,\n  value,\n}) => (\n  <StackContext.Provider value={useMemoDeep(value)}>\n    {children}\n  </StackContext.Provider>\n);\n", "import type { StackflowActions } from \"@stackflow/core\";\nimport { aggregate, createCoreStore, makeEvent } from \"@stackflow/core\";\nimport type {\n  DomainEvent,\n  PushedEvent,\n  StepPushedEvent,\n} from \"@stackflow/core/dist/event-types\";\nimport React, { useEffect, useMemo } from \"react\";\n\nimport { makeActivityId, makeStepId } from \"./activity\";\nimport type { BaseActivities } from \"./BaseActivities\";\nimport { CoreProvider } from \"./core\";\nimport MainRenderer from \"./MainRenderer\";\nimport { PluginsProvider } from \"./plugins\";\nimport type { StackflowReactPlugin } from \"./StackflowReactPlugin\";\nimport type { UseActionsOutputType } from \"./useActions\";\nimport { useActions } from \"./useActions\";\nimport type {\n  UseStepActions,\n  UseStepActionsOutputType,\n} from \"./useStepActions\";\nimport { useStepActions } from \"./useStepActions\";\n\nexport type StackComponentType = React.FC<{\n  initialContext?: any;\n}>;\n\ntype StackflowPluginsEntry<T extends BaseActivities> =\n  | StackflowReactPlugin<T>\n  | StackflowPluginsEntry<T>[];\n\nfunction parseActionOptions(options?: { animate?: boolean }) {\n  if (!options) {\n    return { skipActiveState: false };\n  }\n\n  const isNullableAnimateOption =\n    options.animate === undefined || options.animate == null;\n  if (isNullableAnimateOption) {\n    return { skipActiveState: false };\n  }\n\n  return { skipActiveState: !options.animate };\n}\n\nexport type StackflowOptions<T extends BaseActivities> = {\n  /**\n   * Register activities used in your app\n   */\n  activities: T;\n\n  /**\n   * Transition duration for stack animation (millisecond)\n   */\n  transitionDuration: number;\n\n  /**\n   * Set the first activity to load at the bottom\n   * (It can be overwritten by plugin)\n   */\n  initialActivity?: () => Extract<keyof T, string>;\n\n  /**\n   * Inject stackflow plugins\n   */\n  plugins?: Array<StackflowPluginsEntry<T>>;\n};\n\nexport type StackflowOutput<T extends BaseActivities> = {\n  /**\n   * Created `<Stack />` component\n   */\n  Stack: StackComponentType;\n\n  /**\n   * Created `useFlow()` hooks\n   */\n  useFlow: () => UseActionsOutputType<T>;\n\n  /**\n   * Created `useStepFlow()` hooks\n   */\n  useStepFlow: UseStepActions<T>;\n\n  /**\n   * Created action triggers\n   */\n  actions: Pick<StackflowActions, \"dispatchEvent\" | \"getStack\"> &\n    Pick<UseActionsOutputType<T>, \"push\" | \"pop\" | \"replace\"> &\n    Pick<UseStepActionsOutputType<{}>, \"stepPush\" | \"stepReplace\" | \"stepPop\">;\n\n  /**\n   * Return activities\n   */\n  activities: T;\n};\n\n/**\n * Make `<Stack />` component and `useFlow()` hooks that strictly typed with `activities`\n */\nexport function stackflow<T extends BaseActivities>(\n  options: StackflowOptions<T>,\n): StackflowOutput<T> {\n  const plugins = (options.plugins ?? [])\n    .flat(Infinity as 0)\n    .map((p) => p as StackflowReactPlugin<T>);\n  const pluginInstances = plugins.map((plugin) => plugin());\n\n  const activities = Object.entries(options.activities).reduce(\n    (acc, [key, Activity]) => {\n      if (\"component\" in Activity) {\n        return {\n          ...acc,\n          [key]: {\n            paramsSchema: Activity.paramsSchema,\n            component: Activity.component,\n          },\n        };\n      }\n\n      return {\n        ...acc,\n        [key]: React.memo(Activity),\n      };\n    },\n    {} as T,\n  );\n\n  const initialEventDate = () =>\n    new Date().getTime() - options.transitionDuration;\n\n  const initialEvents = (): DomainEvent[] => {\n    const initializedEvent = makeEvent(\"Initialized\", {\n      transitionDuration: options.transitionDuration,\n      eventDate: initialEventDate(),\n    });\n\n    const activityRegisteredEvents = Object.entries(activities).map(\n      ([activityName, Activity]) =>\n        makeEvent(\"ActivityRegistered\", {\n          activityName,\n          eventDate: initialEventDate(),\n          ...(\"component\" in Activity\n            ? {\n                activityParamsSchema: Activity.paramsSchema,\n              }\n            : null),\n        }),\n    );\n\n    return [initializedEvent, ...activityRegisteredEvents];\n  };\n\n  const initialStack = aggregate(initialEvents(), new Date().getTime());\n\n  const coreStoreRef: {\n    value: ReturnType<typeof createCoreStore> | null;\n  } = {\n    value: null,\n  };\n\n  if (typeof window !== \"undefined\") {\n    const html = window.document.documentElement;\n\n    html.style.setProperty(\n      \"--stackflow-transition-duration\",\n      `${options.transitionDuration}ms`,\n    );\n  }\n\n  const actions: StackflowOutput<T>[\"actions\"] = {\n    dispatchEvent(name, parameters) {\n      return coreStoreRef.value?.actions.dispatchEvent(name, parameters);\n    },\n    getStack() {\n      return coreStoreRef.value?.actions.getStack() ?? initialStack;\n    },\n    push(activityName, activityParams, options) {\n      const activityId = makeActivityId();\n\n      coreStoreRef.value?.actions.push({\n        activityId,\n        activityName,\n        activityParams,\n        skipEnterActiveState: parseActionOptions(options).skipActiveState,\n      });\n\n      return {\n        activityId,\n      };\n    },\n    replace(activityName, activityParams, options) {\n      const activityId = options?.activityId ?? makeActivityId();\n\n      coreStoreRef.value?.actions.replace({\n        activityId: options?.activityId ?? makeActivityId(),\n        activityName,\n        activityParams,\n        skipEnterActiveState: parseActionOptions(options).skipActiveState,\n      });\n\n      return {\n        activityId,\n      };\n    },\n    pop(options) {\n      return coreStoreRef.value?.actions.pop({\n        skipExitActiveState: parseActionOptions(options).skipActiveState,\n      });\n    },\n    stepPush(params) {\n      const stepId = makeStepId();\n\n      return coreStoreRef.value?.actions.stepPush({\n        stepId,\n        stepParams: params,\n      });\n    },\n    stepReplace(params) {\n      const stepId = makeStepId();\n\n      return coreStoreRef.value?.actions.stepReplace({\n        stepId,\n        stepParams: params,\n      });\n    },\n    stepPop() {\n      return coreStoreRef.value?.actions.stepPop({});\n    },\n  };\n\n  const Stack: StackComponentType = (props) => {\n    const coreStore = useMemo(() => {\n      const initialPushedEventsByOption = options.initialActivity\n        ? [\n            makeEvent(\"Pushed\", {\n              activityId: makeActivityId(),\n              activityName: options.initialActivity(),\n              activityParams: {},\n              eventDate: initialEventDate(),\n              skipEnterActiveState: false,\n            }),\n          ]\n        : [];\n\n      const initialPushedEvents = pluginInstances.reduce<\n        (PushedEvent | StepPushedEvent)[]\n      >(\n        (initialEvents, pluginInstance) =>\n          pluginInstance.overrideInitialEvents?.({\n            initialEvents,\n            initialContext: props.initialContext ?? {},\n          }) ?? initialEvents,\n        initialPushedEventsByOption,\n      );\n\n      const isInitialActivityIgnored =\n        initialPushedEvents.length > 0 &&\n        initialPushedEventsByOption.length > 0 &&\n        initialPushedEvents !== initialPushedEventsByOption;\n\n      if (isInitialActivityIgnored) {\n        // eslint-disable-next-line no-console\n        console.warn(\n          `Stackflow - ` +\n            ` Some plugin overrides an \"initialActivity\" option.` +\n            ` The \"initialActivity\" option you set to \"${initialPushedEventsByOption[0].activityName}\" in the \"stackflow\" is ignored.`,\n        );\n      }\n\n      if (initialPushedEvents.length === 0) {\n        // eslint-disable-next-line no-console\n        console.warn(\n          `Stackflow - ` +\n            ` There is no initial activity.` +\n            \" If you want to set the initial activity,\" +\n            \" add the `initialActivity` option of the `stackflow()` function or\" +\n            \" add a plugin that sets the initial activity. (e.g. `@stackflow/plugin-history-sync`)\",\n        );\n      }\n\n      const store = createCoreStore({\n        initialEvents: [...initialEvents(), ...initialPushedEvents],\n        plugins,\n      });\n\n      coreStoreRef.value = store;\n\n      return store;\n    }, []);\n\n    useEffect(() => {\n      coreStore.init();\n    }, [coreStore]);\n\n    return (\n      <PluginsProvider value={pluginInstances}>\n        <CoreProvider coreStore={coreStore}>\n          <MainRenderer activities={activities} />\n        </CoreProvider>\n      </PluginsProvider>\n    );\n  };\n\n  return {\n    Stack,\n    useFlow: useActions,\n    useStepFlow: useStepActions,\n    actions,\n    activities,\n  };\n}\n", "import { id } from \"@stackflow/core\";\n\nexport function makeActivityId() {\n  return id();\n}\n", "import { id } from \"@stackflow/core\";\n\nexport function makeStepId() {\n  return id();\n}\n", "import type { AggregateOutput, CreateCoreStoreOutput } from \"@stackflow/core\";\nimport React, { createContext } from \"react\";\n\nimport { useDeferredValue, useSyncExternalStore } from \"../shims\";\n\nexport const CoreActionsContext = createContext<\n  CreateCoreStoreOutput[\"actions\"]\n>(null as any);\nexport const CoreStateContext = createContext<AggregateOutput>(null as any);\n\nexport interface CoreProviderProps {\n  coreStore: CreateCoreStoreOutput;\n  children: React.ReactNode;\n}\nexport const CoreProvider: React.FC<CoreProviderProps> = ({\n  coreStore,\n  children,\n}) => {\n  const stack = useSyncExternalStore(\n    coreStore.subscribe,\n    coreStore.actions.getStack,\n    coreStore.actions.getStack,\n  );\n\n  const deferredStack = useDeferredValue(stack);\n\n  return (\n    <CoreStateContext.Provider value={deferredStack}>\n      <CoreActionsContext.Provider value={coreStore.actions}>\n        {children}\n      </CoreActionsContext.Provider>\n    </CoreStateContext.Provider>\n  );\n};\n", "import React from \"react\";\n\nexport const useDeferredValue: typeof React.useDeferredValue =\n  React.useDeferredValue ?? ((value) => value);\n", "import React, { useEffect, useState } from \"react\";\n\nexport const useSyncExternalStore: typeof React.useSyncExternalStore =\n  React.useSyncExternalStore ??\n  ((subscribe, getSnapshot) => {\n    const [state, setState] = useState(() => getSnapshot());\n\n    useEffect(() => {\n      const dispose = subscribe(() => {\n        setState(() => getSnapshot());\n      });\n\n      return dispose;\n    });\n\n    return state;\n  });\n", "import React from \"react\";\n\nimport { CoreActionsContext } from \"./CoreProvider\";\n\nexport const useCoreActions = () => React.useContext(CoreActionsContext);\n", "import React from \"react\";\n\nimport { CoreStateContext } from \"./CoreProvider\";\n\nexport const useCoreState = () => React.useContext(CoreStateContext);\n", "import React, { useEffect } from \"react\";\n\nimport type { BaseActivities } from \"./BaseActivities\";\nimport { useCoreState } from \"./core\";\nimport PluginRenderer from \"./PluginRenderer\";\nimport { usePlugins } from \"./plugins\";\nimport type { WithRequired } from \"./utils\";\n\ninterface MainRendererProps {\n  activities: BaseActivities;\n}\nconst MainRenderer: React.FC<MainRendererProps> = ({ activities }) => {\n  const coreState = useCoreState();\n  const plugins = usePlugins();\n\n  const renderingPlugins = plugins.filter(\n    (plugin): plugin is WithRequired<typeof plugin, \"render\"> =>\n      !!plugin.render,\n  );\n\n  useEffect(() => {\n    if (renderingPlugins.length === 0) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        `Stackflow -` +\n          ` There is no rendering plugin, so \"<Stack />\" doesn't render anything.` +\n          ` If you want to render some UI, use \"@stackflow/plugin-renderer-basic\"` +\n          ` or add another rendering plugin.`,\n      );\n    }\n  }, [renderingPlugins]);\n\n  let output = (\n    <>\n      {renderingPlugins.map((plugin) => (\n        <PluginRenderer\n          key={plugin.key}\n          activities={activities}\n          plugin={plugin}\n        />\n      ))}\n    </>\n  );\n\n  plugins.forEach((plugin) => {\n    output =\n      plugin.wrapStack?.({\n        stack: {\n          ...coreState,\n          render() {\n            return output;\n          },\n        },\n      }) ?? output;\n  });\n\n  return output;\n};\n\nexport default MainRenderer;\n", "import React from \"react\";\n\nimport { ActivityProvider } from \"./activity\";\nimport type { BaseActivities } from \"./BaseActivities\";\nimport { useCoreState } from \"./core\";\nimport { usePlugins } from \"./plugins\";\nimport { StackProvider } from \"./stack\";\nimport type { StackflowReactPlugin } from \"./StackflowReactPlugin\";\nimport type { WithRequired } from \"./utils\";\n\ninterface PluginRendererProps {\n  activities: BaseActivities;\n  plugin: WithRequired<ReturnType<StackflowReactPlugin>, \"render\">;\n}\nconst PluginRenderer: React.FC<PluginRendererProps> = ({\n  activities,\n  plugin,\n}) => {\n  const coreState = useCoreState();\n  const plugins = usePlugins();\n\n  return plugin.render({\n    stack: {\n      ...coreState,\n      render(overrideStack) {\n        const stack = {\n          ...coreState,\n          ...overrideStack,\n        };\n\n        return {\n          activities: stack.activities.map((activity) => ({\n            ...activity,\n            key: activity.id,\n            render(overrideActivity) {\n              const Activity = activities[activity.name];\n              let output: React.ReactNode;\n\n              if (\"component\" in Activity) {\n                const { component: ActivityComponent } = Activity;\n                output = <ActivityComponent params={activity.params} />;\n              } else {\n                output = <Activity params={activity.params} />;\n              }\n\n              plugins.forEach((p) => {\n                output =\n                  p.wrapActivity?.({\n                    activity: {\n                      ...activity,\n                      render: () => output,\n                    },\n                  }) ?? output;\n              });\n\n              return (\n                <StackProvider value={stack}>\n                  <ActivityProvider\n                    key={activity.id}\n                    value={{\n                      ...activity,\n                      ...overrideActivity,\n                    }}\n                  >\n                    {output}\n                  </ActivityProvider>\n                </StackProvider>\n              );\n            },\n          })),\n        };\n      },\n    },\n  });\n};\n\nexport default PluginRenderer;\n", "import React, { createContext } from \"react\";\n\nimport type { StackflowReactPlugin } from \"../StackflowReactPlugin\";\n\nexport type PluginsContextValue = Array<ReturnType<StackflowReactPlugin>>;\nexport const PluginsContext = createContext<PluginsContextValue>(null as any);\n\ninterface PluginsProviderProps {\n  children: React.ReactNode;\n  value: PluginsContextValue;\n}\nexport const PluginsProvider: React.FC<PluginsProviderProps> = ({\n  children,\n  value,\n}) => (\n  <PluginsContext.Provider value={value}>{children}</PluginsContext.Provider>\n);\n", "import { useContext } from \"react\";\n\nimport { PluginsContext } from \"./PluginsProvider\";\n\nexport function usePlugins() {\n  return useContext(PluginsContext);\n}\n", "import React, { useMemo } from \"react\";\n\nimport type { ActivityComponentType } from \"./activity\";\nimport { makeActivityId } from \"./activity\";\nimport type { BaseActivities } from \"./BaseActivities\";\nimport { useCoreActions } from \"./core\";\n\nfunction parseActionOptions(options?: { animate?: boolean }) {\n  if (!options) {\n    return { skipActiveState: false };\n  }\n\n  const isNullableAnimateOption =\n    options.animate === undefined || options.animate == null;\n  if (isNullableAnimateOption) {\n    return { skipActiveState: false };\n  }\n\n  return { skipActiveState: !options.animate };\n}\n\nexport type UseActionsOutputType<T extends BaseActivities> = {\n  /**\n   * Is transition pending\n   */\n  pending: boolean;\n\n  /**\n   * Push new activity\n   */\n  push: <K extends Extract<keyof T, string>>(\n    activityName: K,\n    params: T[K] extends\n      | ActivityComponentType<infer U>\n      | { component: ActivityComponentType<infer U> }\n      ? U\n      : {},\n    options?: {\n      animate?: boolean;\n    },\n  ) => {\n    activityId: string;\n  };\n\n  /**\n   * Push new activity in the top and remove current top activity when new activity is activated\n   */\n  replace: <K extends Extract<keyof T, string>>(\n    activityName: K,\n    params: T[K] extends\n      | ActivityComponentType<infer U>\n      | { component: ActivityComponentType<infer U> }\n      ? U\n      : {},\n    options?: {\n      animate?: boolean;\n      activityId?: string;\n    },\n  ) => {\n    activityId: string;\n  };\n\n  /**\n   * Remove top activity\n   */\n  pop: (options?: { animate?: boolean }) => void;\n};\n\nconst useTransition: () => [boolean, React.TransitionStartFunction] =\n  React.useTransition ?? (() => [false, (cb: () => void) => cb()]);\n\nexport function useActions<\n  T extends BaseActivities,\n>(): UseActionsOutputType<T> {\n  const coreActions = useCoreActions();\n  const [pending, startTransition] = useTransition();\n\n  return useMemo(\n    () => ({\n      pending,\n      push(activityName, activityParams, options) {\n        const activityId = makeActivityId();\n\n        coreActions.push({\n          activityId,\n          activityName,\n          activityParams,\n          skipEnterActiveState: parseActionOptions(options).skipActiveState,\n        });\n\n        return {\n          activityId,\n        };\n      },\n      replace(activityName, activityParams, options) {\n        const activityId = makeActivityId();\n\n        coreActions.replace({\n          activityId: options?.activityId ?? makeActivityId(),\n          activityName,\n          activityParams,\n          skipEnterActiveState: parseActionOptions(options).skipActiveState,\n        });\n\n        return {\n          activityId,\n        };\n      },\n      pop(options) {\n        coreActions.pop({\n          skipExitActiveState: parseActionOptions(options).skipActiveState,\n        });\n      },\n    }),\n    [\n      coreActions.push,\n      coreActions.replace,\n      coreActions.pop,\n      pending,\n      startTransition,\n    ],\n  );\n}\n", "import React, { useMemo } from \"react\";\n\nimport type { ActivityComponentType } from \"./activity\";\nimport { makeStepId } from \"./activity\";\nimport type { BaseActivities } from \"./BaseActivities\";\nimport { useCoreActions } from \"./core\";\n\nexport type UseStepActionsOutputType<P> = {\n  pending: boolean;\n  stepPush: (params: P, options?: {}) => void;\n  stepReplace: (params: P, options?: {}) => void;\n  stepPop: (options?: {}) => void;\n};\n\nexport type UseStepActions<T extends BaseActivities = {}> = <\n  K extends Extract<keyof T, string>,\n>(\n  activityName: K,\n) => UseStepActionsOutputType<\n  T[K] extends\n    | ActivityComponentType<infer U>\n    | { component: ActivityComponentType<infer U> }\n    ? U\n    : {}\n>;\n\nconst useTransition: () => [boolean, React.TransitionStartFunction] =\n  React.useTransition ?? (() => [false, (cb: () => void) => cb()]);\n\nexport const useStepActions: UseStepActions = () => {\n  const coreActions = useCoreActions();\n  const [pending, startTransition] = useTransition();\n\n  return useMemo(\n    () => ({\n      pending,\n      stepPush(params) {\n        const stepId = makeStepId();\n\n        coreActions.stepPush({\n          stepId,\n          stepParams: params,\n        });\n      },\n      stepReplace(params) {\n        const stepId = makeStepId();\n\n        coreActions.stepReplace({\n          stepId,\n          stepParams: params,\n        });\n      },\n      stepPop() {\n        coreActions.stepPop({});\n      },\n    }),\n    [\n      coreActions.stepPush,\n      coreActions.stepReplace,\n      coreActions.stepPop,\n      pending,\n      startTransition,\n    ],\n  );\n};\n"],
  "mappings": "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",
  "names": ["src_exports", "__export", "stackflow", "useActions", "useActivity", "useActivityParams", "useStack", "useStepActions", "__toCommonJS", "import_react", "import_react", "import_react", "import_react_fast_compare", "useMemoDeep", "next", "previousRef", "previous", "isEqual", "compare", "ActivityContext", "ActivityProvider", "children", "value", "React", "useMemoDeep", "useActivity", "ActivityContext", "import_react", "useActivityParams", "ActivityContext", "import_react", "import_react", "StackContext", "StackProvider", "children", "value", "React", "useMemoDeep", "useStack", "StackContext", "import_core", "import_react", "import_core", "makeActivityId", "import_core", "makeStepId", "import_react", "import_react", "_a", "useDeferredValue", "React", "value", "import_react", "_a", "useSyncExternalStore", "React", "subscribe", "getSnapshot", "state", "setState", "CoreActionsContext", "CoreStateContext", "CoreProvider", "coreStore", "children", "stack", "useSyncExternalStore", "deferredStack", "useDeferredValue", "React", "import_react", "useCoreActions", "React", "CoreActionsContext", "import_react", "useCoreState", "React", "CoreStateContext", "import_react", "import_react", "import_react", "PluginsContext", "PluginsProvider", "children", "value", "React", "import_react", "usePlugins", "PluginsContext", "PluginRenderer", "activities", "plugin", "coreState", "useCoreState", "plugins", "usePlugins", "__spreadProps", "__spreadValues", "overrideStack", "stack", "activity", "overrideActivity", "Activity", "output", "ActivityComponent", "React", "p", "_a", "_b", "StackProvider", "ActivityProvider", "PluginRenderer_default", "MainRenderer", "activities", "coreState", "useCoreState", "plugins", "usePlugins", "renderingPlugins", "plugin", "output", "React", "PluginRenderer_default", "_a", "_b", "__spreadProps", "__spreadValues", "MainRenderer_default", "import_react", "parseActionOptions", "options", "_a", "useTransition", "React", "cb", "useActions", "coreActions", "useCoreActions", "pending", "startTransition", "activityName", "activityParams", "activityId", "makeActivityId", "import_react", "_a", "useTransition", "React", "cb", "useStepActions", "coreActions", "useCoreActions", "pending", "startTransition", "params", "stepId", "makeStepId", "parseActionOptions", "options", "stackflow", "_a", "plugins", "p", "pluginInstances", "plugin", "activities", "acc", "key", "Activity", "__spreadProps", "__spreadValues", "React", "initialEventDate", "initialEvents", "initializedEvent", "activityRegisteredEvents", "activityName", "initialStack", "coreStoreRef", "props", "coreStore", "initialPushedEventsByOption", "makeActivityId", "initialPushedEvents", "pluginInstance", "_b", "_c", "store", "PluginsProvider", "CoreProvider", "MainRenderer_default", "useActions", "useStepActions", "name", "parameters", "activityParams", "activityId", "params", "stepId", "makeStepId"]
}
