var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));

// src/__internal__/PluginRenderer.tsx
import { ActivityProvider } from "./activity/index.mjs";
import { useCoreState } from "./core/index.mjs";
import { usePlugins } from "./plugins/index.mjs";
import { jsx } from "react/jsx-runtime";
var PluginRenderer = ({
  activityComponentMap,
  plugin,
  initialContext
}) => {
  const coreState = useCoreState();
  const plugins = usePlugins();
  return plugin.render({
    stack: __spreadProps(__spreadValues({}, coreState), {
      render(overrideStack) {
        const stack = __spreadValues(__spreadValues({}, coreState), overrideStack);
        return {
          activities: stack.activities.map((activity) => __spreadProps(__spreadValues({}, activity), {
            key: activity.id,
            render(overrideActivity) {
              const Activity = activityComponentMap[activity.name];
              let output = /* @__PURE__ */ jsx(Activity, { params: activity.params });
              plugins.forEach((p) => {
                var _a, _b;
                output = (_b = (_a = p.wrapActivity) == null ? void 0 : _a.call(p, {
                  activity: __spreadProps(__spreadValues({}, activity), {
                    render: () => output
                  }),
                  initialContext
                })) != null ? _b : output;
              });
              return /* @__PURE__ */ jsx(
                ActivityProvider,
                {
                  value: __spreadValues(__spreadValues({}, activity), overrideActivity),
                  children: output
                },
                activity.id
              );
            }
          }))
        };
      }
    }),
    initialContext
  });
};
PluginRenderer.displayName = "PluginRenderer";
var PluginRenderer_default = PluginRenderer;
export {
  PluginRenderer_default as default
};
