"use strict";
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var PluginRenderer_exports = {};
__export(PluginRenderer_exports, {
  default: () => PluginRenderer_default
});
module.exports = __toCommonJS(PluginRenderer_exports);
var import_jsx_runtime = require("react/jsx-runtime");
var import_activity = require("./activity");
var import_core = require("./core");
var import_plugins = require("./plugins");
const PluginRenderer = ({
  activityComponentMap,
  plugin,
  initialContext
}) => {
  const coreState = (0, import_core.useCoreState)();
  const plugins = (0, import_plugins.usePlugins)();
  return plugin.render({
    stack: __spreadProps(__spreadValues({}, coreState), {
      render(overrideStack) {
        const stack = __spreadValues(__spreadValues({}, coreState), overrideStack);
        return {
          activities: stack.activities.map((activity) => __spreadProps(__spreadValues({}, activity), {
            key: activity.id,
            render(overrideActivity) {
              const Activity = activityComponentMap[activity.name];
              let output = /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Activity, { params: activity.params });
              plugins.forEach((p) => {
                var _a, _b;
                output = (_b = (_a = p.wrapActivity) == null ? void 0 : _a.call(p, {
                  activity: __spreadProps(__spreadValues({}, activity), {
                    render: () => output
                  }),
                  initialContext
                })) != null ? _b : output;
              });
              return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                import_activity.ActivityProvider,
                {
                  value: __spreadValues(__spreadValues({}, activity), overrideActivity),
                  children: output
                },
                activity.id
              );
            }
          }))
        };
      }
    }),
    initialContext
  });
};
PluginRenderer.displayName = "PluginRenderer";
var PluginRenderer_default = PluginRenderer;
