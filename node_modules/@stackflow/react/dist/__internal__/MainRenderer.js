"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var MainRenderer_exports = {};
__export(MainRenderer_exports, {
  default: () => MainRenderer_default
});
module.exports = __toCommonJS(MainRenderer_exports);
var import_jsx_runtime = require("react/jsx-runtime");
var import_react = require("react");
var import_PluginRenderer = __toESM(require("./PluginRenderer"));
var import_core = require("./core");
var import_plugins = require("./plugins");
var import_stack = require("./stack");
const MainRenderer = ({
  activityComponentMap,
  initialContext
}) => {
  const coreState = (0, import_core.useCoreState)();
  const plugins = (0, import_plugins.usePlugins)();
  const renderingPlugins = plugins.filter(
    (plugin) => !!plugin.render
  );
  (0, import_react.useEffect)(() => {
    if (renderingPlugins.length === 0) {
      console.warn(
        `Stackflow - There is no rendering plugin, so "<Stack />" doesn't render anything. If you want to render some UI, use "@stackflow/plugin-renderer-basic" or add another rendering plugin.`
      );
    }
  }, [renderingPlugins]);
  let output = /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_jsx_runtime.Fragment, { children: renderingPlugins.map((plugin) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
    import_PluginRenderer.default,
    {
      activityComponentMap,
      plugin,
      initialContext
    },
    plugin.key
  )) });
  plugins.forEach((plugin) => {
    var _a, _b;
    output = (_b = (_a = plugin.wrapStack) == null ? void 0 : _a.call(plugin, {
      stack: __spreadProps(__spreadValues({}, coreState), {
        render() {
          return output;
        }
      }),
      initialContext
    })) != null ? _b : output;
  });
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_stack.StackProvider, { value: coreState, children: output });
};
MainRenderer.displayName = "MainRenderer";
var MainRenderer_default = MainRenderer;
