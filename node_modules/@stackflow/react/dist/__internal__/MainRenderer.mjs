var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));

// src/__internal__/MainRenderer.tsx
import { useEffect } from "react";
import PluginRenderer from "./PluginRenderer.mjs";
import { useCoreState } from "./core/index.mjs";
import { usePlugins } from "./plugins/index.mjs";
import { StackProvider } from "./stack/index.mjs";
import { Fragment, jsx } from "react/jsx-runtime";
var MainRenderer = ({
  activityComponentMap,
  initialContext
}) => {
  const coreState = useCoreState();
  const plugins = usePlugins();
  const renderingPlugins = plugins.filter(
    (plugin) => !!plugin.render
  );
  useEffect(() => {
    if (renderingPlugins.length === 0) {
      console.warn(
        `Stackflow - There is no rendering plugin, so "<Stack />" doesn't render anything. If you want to render some UI, use "@stackflow/plugin-renderer-basic" or add another rendering plugin.`
      );
    }
  }, [renderingPlugins]);
  let output = /* @__PURE__ */ jsx(Fragment, { children: renderingPlugins.map((plugin) => /* @__PURE__ */ jsx(
    PluginRenderer,
    {
      activityComponentMap,
      plugin,
      initialContext
    },
    plugin.key
  )) });
  plugins.forEach((plugin) => {
    var _a, _b;
    output = (_b = (_a = plugin.wrapStack) == null ? void 0 : _a.call(plugin, {
      stack: __spreadProps(__spreadValues({}, coreState), {
        render() {
          return output;
        }
      }),
      initialContext
    })) != null ? _b : output;
  });
  return /* @__PURE__ */ jsx(StackProvider, { value: coreState, children: output });
};
MainRenderer.displayName = "MainRenderer";
var MainRenderer_default = MainRenderer;
export {
  MainRenderer_default as default
};
