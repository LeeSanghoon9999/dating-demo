// src/future/makeStepActions.ts
import {
  findActivityById,
  findLatestActiveActivity,
  makeStepId
} from "../__internal__/activity/index.mjs";
function makeStepActions(getCoreActions) {
  return {
    pushStep(stepParams, options) {
      const coreActions = getCoreActions();
      const activities = coreActions == null ? void 0 : coreActions.getStack().activities;
      const findTargetActivity = (options == null ? void 0 : options.targetActivityId) ? findActivityById(options.targetActivityId) : findLatestActiveActivity;
      const targetActivity = activities && findTargetActivity(activities);
      if (!targetActivity) {
        throw new Error(
          "Cannot push a step. The target activity is not found."
        );
      }
      const nextParams = typeof stepParams === "function" ? stepParams(targetActivity.params) : stepParams;
      const stepId = makeStepId();
      coreActions.stepPush({
        stepId,
        stepParams: nextParams,
        targetActivityId: options == null ? void 0 : options.targetActivityId,
        hasZIndex: options == null ? void 0 : options.hasZIndex
      });
    },
    replaceStep(stepParams, options) {
      const coreActions = getCoreActions();
      const activities = coreActions == null ? void 0 : coreActions.getStack().activities;
      const findTargetActivity = (options == null ? void 0 : options.targetActivityId) ? findActivityById(options.targetActivityId) : findLatestActiveActivity;
      const targetActivity = activities && findTargetActivity(activities);
      if (!targetActivity) {
        throw new Error(
          "Cannot push a step. The target activity is not found."
        );
      }
      const nextParams = typeof stepParams === "function" ? stepParams(targetActivity.params) : stepParams;
      const stepId = makeStepId();
      coreActions.stepReplace({
        stepId,
        stepParams: nextParams,
        targetActivityId: options == null ? void 0 : options.targetActivityId,
        hasZIndex: options == null ? void 0 : options.hasZIndex
      });
    },
    popStep(options) {
      var _a;
      (_a = getCoreActions()) == null ? void 0 : _a.stepPop({
        targetActivityId: options == null ? void 0 : options.targetActivityId
      });
    }
  };
}
export {
  makeStepActions
};
