"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var makeStepActions_exports = {};
__export(makeStepActions_exports, {
  makeStepActions: () => makeStepActions
});
module.exports = __toCommonJS(makeStepActions_exports);
var import_activity = require("../__internal__/activity");
function makeStepActions(getCoreActions) {
  return {
    pushStep(stepParams, options) {
      const coreActions = getCoreActions();
      const activities = coreActions == null ? void 0 : coreActions.getStack().activities;
      const findTargetActivity = (options == null ? void 0 : options.targetActivityId) ? (0, import_activity.findActivityById)(options.targetActivityId) : import_activity.findLatestActiveActivity;
      const targetActivity = activities && findTargetActivity(activities);
      if (!targetActivity) {
        throw new Error(
          "Cannot push a step. The target activity is not found."
        );
      }
      const nextParams = typeof stepParams === "function" ? stepParams(targetActivity.params) : stepParams;
      const stepId = (0, import_activity.makeStepId)();
      coreActions.stepPush({
        stepId,
        stepParams: nextParams,
        targetActivityId: options == null ? void 0 : options.targetActivityId,
        hasZIndex: options == null ? void 0 : options.hasZIndex
      });
    },
    replaceStep(stepParams, options) {
      const coreActions = getCoreActions();
      const activities = coreActions == null ? void 0 : coreActions.getStack().activities;
      const findTargetActivity = (options == null ? void 0 : options.targetActivityId) ? (0, import_activity.findActivityById)(options.targetActivityId) : import_activity.findLatestActiveActivity;
      const targetActivity = activities && findTargetActivity(activities);
      if (!targetActivity) {
        throw new Error(
          "Cannot push a step. The target activity is not found."
        );
      }
      const nextParams = typeof stepParams === "function" ? stepParams(targetActivity.params) : stepParams;
      const stepId = (0, import_activity.makeStepId)();
      coreActions.stepReplace({
        stepId,
        stepParams: nextParams,
        targetActivityId: options == null ? void 0 : options.targetActivityId,
        hasZIndex: options == null ? void 0 : options.hasZIndex
      });
    },
    popStep(options) {
      var _a;
      (_a = getCoreActions()) == null ? void 0 : _a.stepPop({
        targetActivityId: options == null ? void 0 : options.targetActivityId
      });
    }
  };
}
