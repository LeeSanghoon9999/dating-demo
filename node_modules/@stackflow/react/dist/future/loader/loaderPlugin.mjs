var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));

// src/future/loader/loaderPlugin.tsx
function loaderPlugin(input) {
  return () => ({
    key: "plugin-loader",
    overrideInitialEvents({ initialEvents, initialContext }) {
      if (initialEvents.length === 0) {
        return [];
      }
      return initialEvents.map((event) => {
        if (event.name !== "Pushed") {
          return event;
        }
        if (initialContext.initialLoaderData) {
          return __spreadProps(__spreadValues({}, event), {
            activityContext: __spreadProps(__spreadValues({}, event.activityContext), {
              loaderData: initialContext.initialLoaderData
            })
          });
        }
        const { activityName, activityParams } = event;
        const matchActivity = input.config.activities.find(
          (activity) => activity.name === activityName
        );
        const loader = matchActivity == null ? void 0 : matchActivity.loader;
        if (!loader) {
          return event;
        }
        const loaderData = loader({
          params: activityParams,
          config: input.config
        });
        if (loaderData instanceof Promise) {
          Promise.allSettled([loaderData]).then(([loaderDataPromiseResult]) => {
            printLoaderDataPromiseError({
              promiseResult: loaderDataPromiseResult,
              activityName: matchActivity.name
            });
          });
        }
        return __spreadProps(__spreadValues({}, event), {
          activityContext: __spreadProps(__spreadValues({}, event.activityContext), {
            loaderData
          })
        });
      });
    },
    onBeforePush: createBeforeRouteHandler(input),
    onBeforeReplace: createBeforeRouteHandler(input)
  });
}
function createBeforeRouteHandler(input) {
  return ({
    actionParams,
    actions: { overrideActionParams, pause, resume }
  }) => {
    var _a, _b;
    const { activityName, activityParams, activityContext } = actionParams;
    const matchActivity = input.config.activities.find(
      (activity) => activity.name === activityName
    );
    const matchActivityComponent = input.components[activityName];
    if (!matchActivity || !matchActivityComponent) {
      return;
    }
    const loaderData = (_a = matchActivity.loader) == null ? void 0 : _a.call(matchActivity, {
      params: activityParams,
      config: input.config
    });
    const loaderDataPromise = loaderData instanceof Promise ? loaderData : void 0;
    const lazyComponentPromise = "_load" in matchActivityComponent ? (_b = matchActivityComponent._load) == null ? void 0 : _b.call(matchActivityComponent) : void 0;
    if (loaderDataPromise || lazyComponentPromise) {
      pause();
    }
    Promise.allSettled([loaderDataPromise, lazyComponentPromise]).then(([loaderDataPromiseResult, lazyComponentPromiseResult]) => {
      printLoaderDataPromiseError({
        promiseResult: loaderDataPromiseResult,
        activityName: matchActivity.name
      });
      printLazyComponentPromiseError({
        promiseResult: lazyComponentPromiseResult,
        activityName: matchActivity.name
      });
    }).finally(() => {
      resume();
    });
    overrideActionParams(__spreadProps(__spreadValues({}, actionParams), {
      activityContext: __spreadProps(__spreadValues({}, activityContext), {
        loaderData
      })
    }));
  };
}
function printLoaderDataPromiseError({
  promiseResult,
  activityName
}) {
  if (promiseResult.status === "rejected") {
    console.error(promiseResult.reason);
    console.error(
      `The above error occurred in the "${activityName}" activity loader`
    );
  }
}
function printLazyComponentPromiseError({
  promiseResult,
  activityName
}) {
  if (promiseResult.status === "rejected") {
    console.error(promiseResult.reason);
    console.error(
      `The above error occurred while loading a lazy react component of the "${activityName}" activity`
    );
  }
}
export {
  loaderPlugin
};
