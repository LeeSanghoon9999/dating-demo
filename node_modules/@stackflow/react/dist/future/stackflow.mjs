var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};

// src/future/stackflow.tsx
import {
  makeCoreStore,
  makeEvent
} from "@stackflow/core";
import React, { useMemo } from "react";
import MainRenderer from "../__internal__/MainRenderer.mjs";
import { makeActivityId } from "../__internal__/activity/index.mjs";
import { CoreProvider } from "../__internal__/core/index.mjs";
import { PluginsProvider } from "../__internal__/plugins/index.mjs";
import { isBrowser, makeRef } from "../__internal__/utils/index.mjs";
import { ConfigProvider } from "./ConfigProvider.mjs";
import { loaderPlugin } from "./loader/index.mjs";
import { makeActions } from "./makeActions.mjs";
import { makeStepActions } from "./makeStepActions.mjs";
import { jsx } from "react/jsx-runtime";
function stackflow(input) {
  var _a;
  const plugins = [
    ...((_a = input.plugins) != null ? _a : []).flat(Number.POSITIVE_INFINITY).map((p) => p),
    /**
     * `loaderPlugin()` must be placed after `historySyncPlugin()`
     */
    loaderPlugin(input)
  ];
  const enoughPastTime = () => (/* @__PURE__ */ new Date()).getTime() - input.config.transitionDuration * 2;
  const staticCoreStore = makeCoreStore({
    initialEvents: [
      makeEvent("Initialized", {
        transitionDuration: input.config.transitionDuration,
        eventDate: enoughPastTime()
      }),
      ...input.config.activities.map(
        (activity) => makeEvent("ActivityRegistered", {
          activityName: activity.name,
          eventDate: enoughPastTime()
        })
      )
    ],
    plugins: []
  });
  const [getCoreStore, setCoreStore] = makeRef();
  const Stack = React.memo((props) => {
    const initialContext = useMemo(
      () => __spreadValues(__spreadValues({}, props.initialContext), props.initialLoaderData ? {
        initialLoaderData: props.initialLoaderData
      } : null),
      []
    );
    const coreStore = useMemo(() => {
      const prevCoreStore = getCoreStore();
      if (isBrowser() && prevCoreStore) {
        return prevCoreStore;
      }
      const initialPushedEventsByOption = input.config.initialActivity ? [
        makeEvent("Pushed", {
          activityId: makeActivityId(),
          activityName: input.config.initialActivity(),
          activityParams: {},
          eventDate: enoughPastTime(),
          skipEnterActiveState: false
        })
      ] : [];
      const store = makeCoreStore({
        initialEvents: [
          ...staticCoreStore.pullEvents(),
          ...initialPushedEventsByOption
        ],
        initialContext,
        plugins,
        handlers: {
          onInitialActivityIgnored: (initialPushedEvents) => {
            console.warn(
              `Stackflow - Some plugin overrides an "initialActivity" option. The "initialActivity" option you set to "${initialPushedEvents[0].activityName}" in the "stackflow" is ignored.`
            );
          },
          onInitialActivityNotFound: () => {
            console.warn(
              "Stackflow - There is no initial activity. If you want to set the initial activity, add the `initialActivity` option of the `stackflow()` function or add a plugin that sets the initial activity. (e.g. `@stackflow/plugin-history-sync`)"
            );
          }
        }
      });
      if (isBrowser()) {
        store.init();
        setCoreStore(store);
      }
      return store;
    }, []);
    return /* @__PURE__ */ jsx(ConfigProvider, { value: input.config, children: /* @__PURE__ */ jsx(PluginsProvider, { value: coreStore.pluginInstances, children: /* @__PURE__ */ jsx(CoreProvider, { coreStore, children: /* @__PURE__ */ jsx(
      MainRenderer,
      {
        activityComponentMap: input.components,
        initialContext
      }
    ) }) }) });
  });
  Stack.displayName = "Stack";
  return {
    Stack,
    actions: makeActions(() => {
      var _a2;
      return (_a2 = getCoreStore()) == null ? void 0 : _a2.actions;
    }),
    stepActions: makeStepActions(() => {
      var _a2;
      return (_a2 = getCoreStore()) == null ? void 0 : _a2.actions;
    })
  };
}
export {
  stackflow
};
