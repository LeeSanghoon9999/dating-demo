"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var stackflow_exports = {};
__export(stackflow_exports, {
  stackflow: () => stackflow
});
module.exports = __toCommonJS(stackflow_exports);
var import_jsx_runtime = require("react/jsx-runtime");
var import_core = require("@stackflow/core");
var import_react = __toESM(require("react"));
var import_MainRenderer = __toESM(require("../__internal__/MainRenderer"));
var import_activity = require("../__internal__/activity");
var import_core2 = require("../__internal__/core");
var import_plugins = require("../__internal__/plugins");
var import_utils = require("../__internal__/utils");
var import_ConfigProvider = require("./ConfigProvider");
var import_loader = require("./loader");
var import_makeActions = require("./makeActions");
var import_makeStepActions = require("./makeStepActions");
function stackflow(input) {
  var _a;
  const plugins = [
    ...((_a = input.plugins) != null ? _a : []).flat(Number.POSITIVE_INFINITY).map((p) => p),
    /**
     * `loaderPlugin()` must be placed after `historySyncPlugin()`
     */
    (0, import_loader.loaderPlugin)(input)
  ];
  const enoughPastTime = () => (/* @__PURE__ */ new Date()).getTime() - input.config.transitionDuration * 2;
  const staticCoreStore = (0, import_core.makeCoreStore)({
    initialEvents: [
      (0, import_core.makeEvent)("Initialized", {
        transitionDuration: input.config.transitionDuration,
        eventDate: enoughPastTime()
      }),
      ...input.config.activities.map(
        (activity) => (0, import_core.makeEvent)("ActivityRegistered", {
          activityName: activity.name,
          eventDate: enoughPastTime()
        })
      )
    ],
    plugins: []
  });
  const [getCoreStore, setCoreStore] = (0, import_utils.makeRef)();
  const Stack = import_react.default.memo((props) => {
    const initialContext = (0, import_react.useMemo)(
      () => __spreadValues(__spreadValues({}, props.initialContext), props.initialLoaderData ? {
        initialLoaderData: props.initialLoaderData
      } : null),
      []
    );
    const coreStore = (0, import_react.useMemo)(() => {
      const prevCoreStore = getCoreStore();
      if ((0, import_utils.isBrowser)() && prevCoreStore) {
        return prevCoreStore;
      }
      const initialPushedEventsByOption = input.config.initialActivity ? [
        (0, import_core.makeEvent)("Pushed", {
          activityId: (0, import_activity.makeActivityId)(),
          activityName: input.config.initialActivity(),
          activityParams: {},
          eventDate: enoughPastTime(),
          skipEnterActiveState: false
        })
      ] : [];
      const store = (0, import_core.makeCoreStore)({
        initialEvents: [
          ...staticCoreStore.pullEvents(),
          ...initialPushedEventsByOption
        ],
        initialContext,
        plugins,
        handlers: {
          onInitialActivityIgnored: (initialPushedEvents) => {
            console.warn(
              `Stackflow - Some plugin overrides an "initialActivity" option. The "initialActivity" option you set to "${initialPushedEvents[0].activityName}" in the "stackflow" is ignored.`
            );
          },
          onInitialActivityNotFound: () => {
            console.warn(
              "Stackflow - There is no initial activity. If you want to set the initial activity, add the `initialActivity` option of the `stackflow()` function or add a plugin that sets the initial activity. (e.g. `@stackflow/plugin-history-sync`)"
            );
          }
        }
      });
      if ((0, import_utils.isBrowser)()) {
        store.init();
        setCoreStore(store);
      }
      return store;
    }, []);
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_ConfigProvider.ConfigProvider, { value: input.config, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_plugins.PluginsProvider, { value: coreStore.pluginInstances, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_core2.CoreProvider, { coreStore, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
      import_MainRenderer.default,
      {
        activityComponentMap: input.components,
        initialContext
      }
    ) }) }) });
  });
  Stack.displayName = "Stack";
  return {
    Stack,
    actions: (0, import_makeActions.makeActions)(() => {
      var _a2;
      return (_a2 = getCoreStore()) == null ? void 0 : _a2.actions;
    }),
    stepActions: (0, import_makeStepActions.makeStepActions)(() => {
      var _a2;
      return (_a2 = getCoreStore()) == null ? void 0 : _a2.actions;
    })
  };
}
