var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/future/lazy.ts
import React from "react";
function lazy(load) {
  let cachedValue = null;
  const cachedLoad = () => __async(this, null, function* () {
    if (!cachedValue) {
      const value = yield load();
      cachedValue = value;
    }
    return cachedValue;
  });
  const LazyComponent = React.lazy(cachedLoad);
  LazyComponent._load = cachedLoad;
  return LazyComponent;
}
export {
  lazy
};
