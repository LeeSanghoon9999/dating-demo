declare const AppBar: import("react").ForwardRefExoticComponent<Partial<Pick<{
    borderColor: string;
    borderColorTransitionDuration: string;
    borderSize: string;
    height: string;
    heightTransitionDuration: string;
    minHeight: string;
    iconColor: string;
    iconColorTransitionDuration: string;
    textColor: string;
    textColorTransitionDuration: string;
    backgroundColor: string;
    backgroundColorTransitionDuration: string;
    overflow: string;
    minSafeAreaInsetTop: string;
}, "height" | "backgroundColor" | "borderColor" | "overflow" | "borderColorTransitionDuration" | "borderSize" | "heightTransitionDuration" | "iconColor" | "iconColorTransitionDuration" | "textColor" | "textColorTransitionDuration" | "backgroundColorTransitionDuration">> & {
    title?: React.ReactNode;
    renderLeft?: () => React.ReactNode;
    renderRight?: () => React.ReactNode;
    backButton?: {
        renderIcon?: () => React.ReactNode;
        ariaLabel?: string;
        onClick?: (e: React.MouseEvent<HTMLButtonElement>) => void;
    } | {
        render?: () => React.ReactNode;
    };
    closeButton?: {
        renderIcon?: () => React.ReactNode;
        ariaLabel?: string;
        onClick?: (e: React.MouseEvent<HTMLButtonElement>) => void;
    } | {
        render?: () => React.ReactNode;
    };
    closeButtonLocation?: "left" | "right";
    border?: boolean;
    modalPresentationStyle?: "fullScreen";
    activityEnterStyle?: "slideInLeft";
    onTopClick?: (e: React.MouseEvent) => void;
} & import("react").RefAttributes<HTMLDivElement>>;
export default AppBar;
//# sourceMappingURL=AppBar.d.ts.map