var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));

// src/assets/IconBack.tsx
import { jsx } from "react/jsx-runtime";
var IconBack = (props) => /* @__PURE__ */ jsx(
  "svg",
  {
    className: props.className,
    width: "24",
    height: "24",
    viewBox: "0 0 24 24",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    children: /* @__PURE__ */ jsx(
      "path",
      {
        fillRule: "evenodd",
        clipRule: "evenodd",
        d: "M16.7241 2.76052C17.105 3.16043 17.0896 3.79341 16.6897 4.17431L8.45 12.0222L16.6896 19.8689C17.0896 20.2498 17.105 20.8827 16.7242 21.2827C16.3433 21.6826 15.7103 21.6981 15.3104 21.3172L6.31037 12.7464C6.11218 12.5576 6.00001 12.2959 6 12.0222C5.99999 11.7486 6.11215 11.4868 6.31032 11.2981L15.3103 2.72608C15.7102 2.34518 16.3432 2.3606 16.7241 2.76052Z",
        fill: "currentColor"
      }
    )
  }
);
var IconBack_default = IconBack;

// src/assets/IconClose.tsx
import { jsx as jsx2 } from "react/jsx-runtime";
var IconClose = (props) => /* @__PURE__ */ jsx2(
  "svg",
  {
    className: props.className,
    width: "24",
    height: "24",
    viewBox: "0 0 24 24",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    children: /* @__PURE__ */ jsx2(
      "path",
      {
        d: "M20.7071 4.70711C21.0976 4.31658 21.0976 3.68342 20.7071 3.29289C20.3166 2.90237 19.6834 2.90237 19.2929 3.29289L12 10.5858L4.70711 3.29289C4.31658 2.90237 3.68342 2.90237 3.29289 3.29289C2.90237 3.68342 2.90237 4.31658 3.29289 4.70711L10.5858 12L3.29289 19.2929C2.90237 19.6834 2.90237 20.3166 3.29289 20.7071C3.68342 21.0976 4.31658 21.0976 4.70711 20.7071L12 13.4142L19.2929 20.7071C19.6834 21.0976 20.3166 21.0976 20.7071 20.7071C21.0976 20.3166 21.0976 19.6834 20.7071 19.2929L13.4142 12L20.7071 4.70711Z",
        fill: "currentColor"
      }
    )
  }
);
var IconClose_default = IconClose;

// src/basicUIPlugin.tsx
import { assignInlineVars } from "@vanilla-extract/dynamic";
import { createContext, useContext } from "react";

// src/basicUIPlugin.css.ts
import { createRuntimeFn as _7a468 } from "@vanilla-extract/recipes/createRuntimeFn";
var globalVars = { backgroundColor: "var(--stackflow-plugin-basic-ui-background-color)", dimBackgroundColor: "var(--stackflow-plugin-basic-ui-dim-background-color)", transitionDuration: "var(--stackflow-plugin-basic-ui-transition-duration)", computedTransitionDuration: "var(--stackflow-plugin-basic-ui-computed-transition-duration)", appBar: { borderColor: "var(--stackflow-plugin-basic-ui-app-bar-border-color)", borderColorTransitionDuration: "var(--stackflow-plugin-basic-ui-app-bar-border-color-transition-duration)", borderSize: "var(--stackflow-plugin-basic-ui-app-bar-border-size)", height: "var(--stackflow-plugin-basic-ui-app-bar-height)", heightTransitionDuration: "var(--stackflow-plugin-basic-ui-app-bar-height-transition-duration)", minHeight: "var(--stackflow-plugin-basic-ui-app-bar-min-height)", iconColor: "var(--stackflow-plugin-basic-ui-app-bar-icon-color)", iconColorTransitionDuration: "var(--stackflow-plugin-basic-ui-app-bar-icon-color-transition-duration)", textColor: "var(--stackflow-plugin-basic-ui-app-bar-text-color)", textColorTransitionDuration: "var(--stackflow-plugin-basic-ui-app-bar-text-color-transition-duration)", backgroundColor: "var(--stackflow-plugin-basic-ui-app-bar-background-color)", backgroundColorTransitionDuration: "var(--stackflow-plugin-basic-ui-app-bar-background-color-transition-duration)", overflow: "var(--stackflow-plugin-basic-ui-app-bar-overflow)", minSafeAreaInsetTop: "var(--stackflow-plugin-basic-ui-app-bar-min-safe-area-inset-top)" }, bottomSheet: { borderRadius: "var(--stackflow-plugin-basic-ui-bottom-sheet-border-radius)" }, modal: { borderRadius: "var(--stackflow-plugin-basic-ui-modal-border-radius)", maxWidth: "var(--stackflow-plugin-basic-ui-modal-max-width)" } };
var stackWrapper = _7a468({ defaultClassName: "_1q6dj2j2", variantClassNames: { theme: { android: "_1q6dj2j0", cupertino: "_1q6dj2j1" }, globalTransitionState: { idle: "_1q6dj2j5", loading: "_1q6dj2j6", paused: "_1q6dj2j7" } }, defaultVariants: {}, compoundVariants: [] });

// src/utils/compact.ts
function compact(arr) {
  return arr.filter(
    (item) => item !== void 0 && item !== null
  );
}

// src/utils/compactMap.ts
function compactMap(obj) {
  return Object.entries(obj).reduce((acc, [key, value]) => {
    if (value !== null && value !== void 0) {
      acc[key] = value;
    }
    return acc;
  }, {});
}

// src/basicUIPlugin.tsx
import { jsx as jsx3 } from "react/jsx-runtime";
var GlobalOptionsContext = createContext({
  theme: "android"
});
var GlobalOptionsProvider = GlobalOptionsContext.Provider;
function useGlobalOptions() {
  return useContext(GlobalOptionsContext);
}
var basicUIPlugin = (options) => () => ({
  key: "basic-ui",
  wrapStack({ stack, initialContext }) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j;
    const _options = typeof options === "function" ? options({ initialContext }) : options;
    return /* @__PURE__ */ jsx3(
      GlobalOptionsProvider,
      {
        value: __spreadProps(__spreadValues({}, _options), {
          theme: (_a = initialContext == null ? void 0 : initialContext.theme) != null ? _a : _options.theme
        }),
        children: /* @__PURE__ */ jsx3(
          "div",
          {
            className: compact([
              stackWrapper({
                theme: (_b = initialContext == null ? void 0 : initialContext.theme) != null ? _b : _options.theme,
                globalTransitionState: stack.globalTransitionState
              }),
              _options.rootClassName
            ]).join(" "),
            style: assignInlineVars(
              compactMap({
                [globalVars.backgroundColor]: _options.backgroundColor,
                [globalVars.dimBackgroundColor]: _options.dimBackgroundColor,
                [globalVars.transitionDuration]: `${stack.transitionDuration}ms`,
                [globalVars.computedTransitionDuration]: stack.globalTransitionState === "loading" ? `${stack.transitionDuration}ms` : "0ms",
                [globalVars.appBar.borderColor]: (_c = _options.appBar) == null ? void 0 : _c.borderColor,
                [globalVars.appBar.borderSize]: (_d = _options.appBar) == null ? void 0 : _d.borderSize,
                [globalVars.appBar.height]: (_e = _options.appBar) == null ? void 0 : _e.height,
                [globalVars.appBar.iconColor]: (_f = _options.appBar) == null ? void 0 : _f.iconColor,
                [globalVars.appBar.textColor]: (_g = _options.appBar) == null ? void 0 : _g.textColor,
                [globalVars.appBar.minSafeAreaInsetTop]: (_h = _options.appBar) == null ? void 0 : _h.minSafeAreaInsetTop,
                [globalVars.bottomSheet.borderRadius]: (_i = _options.bottomSheet) == null ? void 0 : _i.borderRadius,
                [globalVars.modal.borderRadius]: (_j = _options.modal) == null ? void 0 : _j.borderRadius
              })
            ),
            children: stack.render()
          }
        )
      }
    );
  }
});

// src/components/AppScreen.tsx
import { useActions as useActions2 } from "@stackflow/react";
import {
  useActivityDataAttributes as useActivityDataAttributes2,
  useLazy,
  useMounted as useMounted2,
  useNullableActivity as useNullableActivity2,
  useStyleEffectHide,
  useStyleEffectOffset,
  useStyleEffectSwipeBack,
  useZIndexBase
} from "@stackflow/react-ui-core";
import { assignInlineVars as assignInlineVars3 } from "@vanilla-extract/dynamic";
import { createContext as createContext2, useContext as useContext2, useMemo, useRef as useRef2 } from "react";

// src/components/AppBar.tsx
import { useActions } from "@stackflow/react";
import {
  useActivityDataAttributes,
  useAppBarTitleMaxWidth,
  useMounted,
  useNullableActivity
} from "@stackflow/react-ui-core";
import { assignInlineVars as assignInlineVars2 } from "@vanilla-extract/dynamic";
import { forwardRef, useRef } from "react";

// src/components/AppBar.css.ts
import { createRuntimeFn as _7a4682 } from "@vanilla-extract/recipes/createRuntimeFn";
var appBar = _7a4682({ defaultClassName: "_1yk3a452 dhthxq4 dhthxq0 dhthxqh _1dlf4348 _1yk3a451", variantClassNames: { border: { true: "_1yk3a453" }, modalPresentationStyle: { fullScreen: "_1yk3a454" }, activityEnterStyle: { slideInLeft: "_1yk3a455" } }, defaultVariants: {}, compoundVariants: [] });
var backButton = "_1yk3a459 dhthxq9 dhthxq7 dhthxqb dhthxqf dhthxqi";
var center = "dhthxq9 dhthxq7 dhthxq8 _1yk3a450";
var centerMain = "_1yk3a45c";
var centerMainEdge = "_1yk3a45d dhthxqi dhthxq4 dhthxq2 dhthxqf";
var centerText = "_1yk3a45e dhthxqc dhthxqd dhthxq0";
var closeButton = "_1yk3a459 dhthxq9 dhthxq7 dhthxqb dhthxqf dhthxqi";
var container = "_1yk3a457 dhthxqa dhthxq7 _1yk3a451";
var left = "_1yk3a458 dhthxq9 dhthxq7 dhthxq1 _1yk3a450";
var right = "_1yk3a45f dhthxq9 dhthxq7 dhthxq1 dhthxq5 _1yk3a450";
var safeArea = "_1yk3a456";

// src/components/AppScreen.css.ts
import { createRuntimeFn as _7a4683 } from "@vanilla-extract/recipes/createRuntimeFn";
var appScreen = _7a4683({ defaultClassName: "dhthxq4 dhthxq0 dhthxq1 dhthxq2 dhthxq3 dhthxqc", variantClassNames: { transitionState: { "enter-active": "_1dlf434a", "enter-done": "_1dlf434b", "exit-active": "_1dlf434c", "exit-done": "_1dlf434d" } }, defaultVariants: {}, compoundVariants: [] });
var dim = "_1dlf434j dhthxq4 dhthxq0 dhthxq1 dhthxq2 dhthxq3 _1dlf4347 _1dlf4349";
var edge = _7a4683({ defaultClassName: "_1dlf434o dhthxq4 dhthxq2 dhthxq3 dhthxq1", variantClassNames: { hasAppBar: { true: "_1dlf434p" } }, defaultVariants: {}, compoundVariants: [] });
var enterActive = "_1dlf434a";
var enterDone = "_1dlf434b";
var exitActive = "_1dlf434c";
var exitDone = "_1dlf434d";
var paper = _7a4683({ defaultClassName: "_1dlf434k dhthxq4 dhthxq0 dhthxq1 dhthxq2 dhthxq3 _1dlf4348 _1dlf4349", variantClassNames: { hasAppBar: { true: "_1dlf434l dhthxqg" }, modalPresentationStyle: { fullScreen: "_1dlf434m" }, activityEnterStyle: { slideInLeft: "_1dlf434n" } }, defaultVariants: {}, compoundVariants: [] });
var vars = { transitionDuration: "var(--_1dlf4340)", zIndexes: { dim: "var(--_1dlf4341)", paper: "var(--_1dlf4342)", edge: "var(--_1dlf4343)", appBar: "var(--_1dlf4344)" }, appBar: { topMargin: "var(--_1dlf4345)", center: { mainWidth: "var(--_1dlf4346)" } } };

// src/components/AppBar.tsx
import { jsx as jsx4, jsxs } from "react/jsx-runtime";
var AppBar = forwardRef(
  ({
    title,
    renderLeft,
    renderRight,
    backButton: backButton2,
    closeButton: closeButton2,
    closeButtonLocation = "left",
    border = true,
    modalPresentationStyle,
    activityEnterStyle,
    iconColor,
    iconColorTransitionDuration,
    textColor,
    textColorTransitionDuration,
    borderColor,
    borderColorTransitionDuration,
    borderSize,
    height,
    heightTransitionDuration,
    overflow,
    backgroundColor,
    backgroundColorTransitionDuration,
    onTopClick
  }, ref) => {
    var _a, _b;
    const actions = useActions();
    const activity = useNullableActivity();
    const activityDataAttributes = useActivityDataAttributes();
    const mounted = useMounted();
    const globalOptions = useGlobalOptions();
    const globalCloseButton = (_a = globalOptions.appBar) == null ? void 0 : _a.closeButton;
    const globalBackButton = (_b = globalOptions.appBar) == null ? void 0 : _b.backButton;
    const centerRef = useRef(null);
    const { maxWidth } = useAppBarTitleMaxWidth({
      outerRef: ref,
      innerRef: centerRef,
      enable: globalOptions.theme === "cupertino"
    });
    const onBackClick = (e) => {
      if (backButton2 && "onClick" in backButton2 && backButton2.onClick) {
        backButton2.onClick(e);
      }
      if (!e.defaultPrevented) {
        actions.pop();
      }
    };
    const renderBackButton = () => {
      var _a2, _b2;
      if (!activity) {
        return null;
      }
      if (activity.isRoot) {
        return null;
      }
      if (!backButton2 && !globalBackButton) {
        return /* @__PURE__ */ jsx4(
          "button",
          {
            type: "button",
            "aria-label": "Go Back",
            className: backButton,
            onClick: onBackClick,
            children: /* @__PURE__ */ jsx4(IconBack_default, {})
          }
        );
      }
      if (backButton2 && "render" in backButton2 && backButton2.render) {
        return (_a2 = backButton2.render) == null ? void 0 : _a2.call(backButton2);
      }
      if (globalBackButton && "render" in globalBackButton && globalBackButton.render) {
        return (_b2 = globalBackButton.render) == null ? void 0 : _b2.call(globalBackButton);
      }
      return /* @__PURE__ */ jsx4(
        "button",
        {
          type: "button",
          className: backButton,
          "aria-label": backButton2 && "ariaLabel" in backButton2 ? backButton2.ariaLabel : globalBackButton && "ariaLabel" in globalBackButton ? globalBackButton.ariaLabel : void 0,
          onClick: onBackClick,
          children: (() => {
            if (backButton2 && "renderIcon" in backButton2 && backButton2.renderIcon) {
              return backButton2.renderIcon();
            }
            if (globalBackButton && "renderIcon" in globalBackButton && globalBackButton.renderIcon) {
              return globalBackButton.renderIcon();
            }
            if (modalPresentationStyle === "fullScreen") {
              return /* @__PURE__ */ jsx4(IconClose_default, {});
            }
            return /* @__PURE__ */ jsx4(IconBack_default, {});
          })()
        }
      );
    };
    const onCloseClick = (e) => {
      var _a2;
      if (closeButton2 && "onClick" in closeButton2 && closeButton2.onClick) {
        closeButton2.onClick(e);
      }
      if (!e.defaultPrevented && globalCloseButton && "onClick" in globalCloseButton) {
        (_a2 = globalCloseButton.onClick) == null ? void 0 : _a2.call(globalCloseButton, e);
      }
    };
    const renderCloseButton = () => {
      var _a2;
      const isRoot = !activity || activity.isRoot;
      const showCloseButton = (closeButton3) => closeButton3 && "render" in closeButton3 && closeButton3.render || closeButton3 && "renderIcon" in closeButton3 && closeButton3.renderIcon || closeButton3 && "onClick" in closeButton3 && closeButton3.onClick;
      if (!(showCloseButton(closeButton2) || showCloseButton((_a2 = globalOptions.appBar) == null ? void 0 : _a2.closeButton)) || !isRoot) {
        return null;
      }
      if (closeButton2 && "render" in closeButton2 && closeButton2.render) {
        return closeButton2.render();
      }
      if (globalCloseButton && "render" in globalCloseButton && globalCloseButton.render) {
        return globalCloseButton.render();
      }
      return /* @__PURE__ */ jsx4(
        "button",
        {
          type: "button",
          className: closeButton,
          "aria-label": closeButton2 && "ariaLabel" in closeButton2 ? closeButton2.ariaLabel : globalCloseButton && "ariaLabel" in globalCloseButton ? globalCloseButton.ariaLabel : void 0,
          onClick: onCloseClick,
          children: (() => {
            if (closeButton2 && "renderIcon" in closeButton2 && closeButton2.renderIcon) {
              return closeButton2.renderIcon();
            }
            if (globalCloseButton && "renderIcon" in globalCloseButton && globalCloseButton.renderIcon) {
              return globalCloseButton.renderIcon();
            }
            return /* @__PURE__ */ jsx4(IconClose_default, {});
          })()
        }
      );
    };
    return /* @__PURE__ */ jsxs(
      "div",
      __spreadProps(__spreadValues({
        ref,
        className: appBar({
          border,
          modalPresentationStyle,
          activityEnterStyle
        }),
        style: assignInlineVars2(
          compactMap({
            [globalVars.appBar.iconColor]: iconColor,
            [globalVars.appBar.iconColorTransitionDuration]: iconColorTransitionDuration,
            [globalVars.appBar.textColor]: textColor,
            [globalVars.appBar.textColorTransitionDuration]: textColorTransitionDuration,
            [globalVars.appBar.borderColor]: borderColor,
            [globalVars.appBar.borderColorTransitionDuration]: borderColorTransitionDuration,
            [globalVars.appBar.borderSize]: borderSize,
            [globalVars.appBar.height]: height,
            [globalVars.appBar.heightTransitionDuration]: heightTransitionDuration,
            [globalVars.appBar.overflow]: overflow,
            [globalVars.appBar.backgroundColor]: backgroundColor || globalVars.backgroundColor,
            [globalVars.appBar.backgroundColorTransitionDuration]: backgroundColorTransitionDuration,
            [vars.appBar.center.mainWidth]: `${maxWidth}px`
          })
        ),
        "data-part": "appBar"
      }, activityDataAttributes), {
        children: [
          /* @__PURE__ */ jsx4("div", { className: safeArea }),
          /* @__PURE__ */ jsxs("div", { className: container, children: [
            /* @__PURE__ */ jsxs("div", { className: left, children: [
              closeButtonLocation === "left" && renderCloseButton(),
              renderBackButton(),
              renderLeft == null ? void 0 : renderLeft()
            ] }),
            /* @__PURE__ */ jsx4("div", { ref: centerRef, className: center, children: /* @__PURE__ */ jsxs("div", { className: centerMain, children: [
              typeof title === "string" ? /* @__PURE__ */ jsx4("div", { className: centerText, children: title }) : title,
              /* @__PURE__ */ jsx4(
                "button",
                {
                  className: centerMainEdge,
                  type: "button",
                  onClick: onTopClick
                }
              )
            ] }) }),
            /* @__PURE__ */ jsxs("div", { className: right, children: [
              renderRight == null ? void 0 : renderRight(),
              closeButtonLocation === "right" && renderCloseButton()
            ] })
          ] })
        ]
      })
    );
  }
);
AppBar.displayName = "AppBar";
var AppBar_default = AppBar;

// src/components/AppScreen.tsx
import { jsx as jsx5, jsxs as jsxs2 } from "react/jsx-runtime";
var OFFSET_PX_ANDROID = 32;
var OFFSET_PX_CUPERTINO = 80;
var Context = createContext2(null);
function useAppScreen() {
  return useContext2(Context);
}
var AppScreen = ({
  backgroundColor,
  dimBackgroundColor,
  appBar: appBar2,
  preventSwipeBack,
  CUPERTINO_ONLY_modalPresentationStyle,
  ANDROID_ONLY_activityEnterStyle,
  children
}) => {
  var _a;
  const globalOptions = useGlobalOptions();
  const activity = useNullableActivity2();
  const activityDataAttributes = useActivityDataAttributes2();
  const mounted = useMounted2();
  const { pop } = useActions2();
  const appScreenRef = useRef2(null);
  const dimRef = useRef2(null);
  const paperRef = useRef2(null);
  const edgeRef = useRef2(null);
  const appBarRef = useRef2(null);
  const modalPresentationStyle = globalOptions.theme === "cupertino" ? CUPERTINO_ONLY_modalPresentationStyle : void 0;
  const activityEnterStyle = globalOptions.theme === "android" ? ANDROID_ONLY_activityEnterStyle : void 0;
  const isSwipeBackPrevented = preventSwipeBack || modalPresentationStyle === "fullScreen";
  const hasAppBar = !!appBar2;
  const zIndexBase = useZIndexBase();
  let zIndexDim;
  let zIndexPaper;
  let zIndexEdge;
  let zIndexAppBar;
  switch (globalOptions.theme) {
    case "cupertino": {
      zIndexDim = zIndexBase + (modalPresentationStyle === "fullScreen" ? 2 : 0);
      zIndexPaper = zIndexBase + (hasAppBar && modalPresentationStyle !== "fullScreen" ? 1 : 3);
      zIndexEdge = zIndexBase + 4;
      zIndexAppBar = zIndexBase + 7;
      break;
    }
    default: {
      zIndexDim = zIndexBase;
      zIndexPaper = zIndexBase + (activityEnterStyle === "slideInLeft" ? 1 : 3);
      zIndexEdge = zIndexBase + 4;
      zIndexAppBar = zIndexBase + (activityEnterStyle === "slideInLeft" ? 7 : 4);
      break;
    }
  }
  const transitionState = (_a = activity == null ? void 0 : activity.transitionState) != null ? _a : "enter-done";
  const lazyTransitionState = useLazy(transitionState);
  useStyleEffectHide({
    refs: [appScreenRef]
  });
  useStyleEffectOffset({
    refs: globalOptions.theme === "cupertino" || activityEnterStyle === "slideInLeft" ? [paperRef] : [paperRef, appBarRef],
    offsetStyles: globalOptions.theme === "cupertino" ? {
      transform: `translate3d(-${OFFSET_PX_CUPERTINO / 16}rem, 0, 0)`,
      opacity: "1"
    } : activityEnterStyle === "slideInLeft" ? {
      transform: "translate3d(-50%, 0, 0)",
      opacity: "0"
    } : {
      transform: `translate3d(0, -${OFFSET_PX_ANDROID / 16}rem, 0)`,
      opacity: "1"
    },
    transitionDuration: globalVars.computedTransitionDuration,
    hasEffect: modalPresentationStyle !== "fullScreen"
  });
  useStyleEffectSwipeBack({
    dimRef,
    edgeRef,
    paperRef,
    appBarRef,
    offset: OFFSET_PX_CUPERTINO,
    transitionDuration: globalVars.transitionDuration,
    preventSwipeBack: isSwipeBackPrevented || globalOptions.theme !== "cupertino",
    getActivityTransitionState() {
      const $paper = paperRef.current;
      const $appScreen = $paper == null ? void 0 : $paper.parentElement;
      if (!$appScreen) {
        return null;
      }
      if ($appScreen.classList.contains(enterActive)) {
        return "enter-active";
      }
      if ($appScreen.classList.contains(enterDone)) {
        return "enter-done";
      }
      if ($appScreen.classList.contains(exitActive)) {
        return "exit-active";
      }
      if ($appScreen.classList.contains(exitDone)) {
        return "exit-done";
      }
      return null;
    },
    onSwipeEnd({ swiped }) {
      if (swiped) {
        pop();
      }
    }
  });
  const onAppBarTopClick = (e) => {
    var _a2, _b;
    (_a2 = appBar2 == null ? void 0 : appBar2.onTopClick) == null ? void 0 : _a2.call(appBar2, e);
    if (!e.defaultPrevented) {
      (_b = paperRef.current) == null ? void 0 : _b.scroll({
        top: 0,
        behavior: "smooth"
      });
    }
  };
  return /* @__PURE__ */ jsx5(
    Context.Provider,
    {
      value: useMemo(
        () => ({
          scroll({ top }) {
            var _a2;
            (_a2 = paperRef == null ? void 0 : paperRef.current) == null ? void 0 : _a2.scroll({
              top,
              behavior: "smooth"
            });
          },
          zIndices: {
            dim: zIndexDim,
            paper: zIndexPaper,
            edge: zIndexEdge,
            appBar: zIndexAppBar
          }
        }),
        [paperRef, zIndexDim, zIndexPaper, zIndexEdge, zIndexAppBar]
      ),
      children: /* @__PURE__ */ jsxs2(
        "div",
        __spreadProps(__spreadValues({
          ref: appScreenRef,
          className: appScreen({
            transitionState: transitionState === "enter-done" || transitionState === "exit-done" ? transitionState : lazyTransitionState
          }),
          style: assignInlineVars3(
            compactMap({
              [globalVars.backgroundColor]: backgroundColor,
              [globalVars.dimBackgroundColor]: dimBackgroundColor,
              [globalVars.appBar.height]: appBar2 == null ? void 0 : appBar2.height,
              [globalVars.appBar.heightTransitionDuration]: appBar2 == null ? void 0 : appBar2.heightTransitionDuration,
              [vars.zIndexes.dim]: `${zIndexDim}`,
              [vars.zIndexes.paper]: `${zIndexPaper}`,
              [vars.zIndexes.edge]: `${zIndexEdge}`,
              [vars.zIndexes.appBar]: `${zIndexAppBar}`,
              [vars.transitionDuration]: transitionState === "enter-active" || transitionState === "exit-active" ? globalVars.computedTransitionDuration : "0ms"
            })
          ),
          "data-stackflow-component-name": "AppScreen"
        }, activityDataAttributes), {
          children: [
            activityEnterStyle !== "slideInLeft" && /* @__PURE__ */ jsx5(
              "div",
              __spreadValues({
                ref: dimRef,
                className: dim,
                "data-part": "dim"
              }, activityDataAttributes)
            ),
            appBar2 && /* @__PURE__ */ jsx5(
              AppBar_default,
              __spreadProps(__spreadValues({}, appBar2), {
                ref: appBarRef,
                modalPresentationStyle,
                activityEnterStyle,
                onTopClick: onAppBarTopClick
              })
            ),
            /* @__PURE__ */ jsx5(
              "div",
              __spreadProps(__spreadValues({
                ref: paperRef,
                className: paper({
                  hasAppBar,
                  modalPresentationStyle,
                  activityEnterStyle
                }),
                "data-part": "paper"
              }, activityDataAttributes), {
                children
              }),
              activity == null ? void 0 : activity.id
            ),
            !(activity == null ? void 0 : activity.isRoot) && globalOptions.theme === "cupertino" && !isSwipeBackPrevented && /* @__PURE__ */ jsx5(
              "div",
              __spreadValues({
                ref: edgeRef,
                className: edge({ hasAppBar }),
                "data-part": "edge"
              }, activityDataAttributes)
            )
          ]
        })
      )
    }
  );
};
var AppScreen_default = AppScreen;

// src/components/BottomSheet.tsx
import { useActions as useActions3 } from "@stackflow/react";
import { assignInlineVars as assignInlineVars4 } from "@vanilla-extract/dynamic";
import { useRef as useRef3 } from "react";
import {
  useLazy as useLazy2,
  useNullableActivity as useNullableActivity3,
  useStyleEffect,
  useZIndexBase as useZIndexBase2
} from "@stackflow/react-ui-core";

// src/components/BottomSheet.css.ts
import { createRuntimeFn as _7a4684 } from "@vanilla-extract/recipes/createRuntimeFn";
var container2 = _7a4684({ defaultClassName: "dhthxq4 dhthxq0 dhthxq1 dhthxq2 dhthxq3 dhthxqc", variantClassNames: { transitionState: { "enter-active": "_1ht38h04", "enter-done": "_1ht38h05", "exit-active": "_1ht38h06", "exit-done": "_1ht38h07" } }, defaultVariants: {}, compoundVariants: [] });
var dim2 = "_1ht38h0d dhthxq4 dhthxq0 dhthxq1 dhthxq2 dhthxq3 dhthxqc dhthxqa dhthxq7 _1ht38h03";
var paper2 = "_1ht38h0e dhthxqc _1ht38h03";
var vars2 = { transitionDuration: "var(--_1ht38h00)", zIndexes: { dim: "var(--_1ht38h01)", paper: "var(--_1ht38h02)" } };

// src/components/BottomSheet.tsx
import { jsx as jsx6 } from "react/jsx-runtime";
var BottomSheet = ({
  borderRadius = "1rem",
  backgroundColor,
  dimBackgroundColor,
  paperRef,
  onOutsideClick,
  children
}) => {
  var _a;
  const activity = useNullableActivity3();
  const { pop } = useActions3();
  const containerRef = useRef3(null);
  const dimRef = useRef3(null);
  useStyleEffect({
    styleName: "hide",
    refs: [containerRef]
  });
  useStyleEffect({
    styleName: "offset",
    refs: [dimRef]
  });
  useStyleEffect({
    styleName: "swipe-back",
    refs: [dimRef]
  });
  const popLock = useRef3(false);
  const onDimClick = (e) => {
    onOutsideClick == null ? void 0 : onOutsideClick(e);
    if (e.defaultPrevented) {
      return;
    }
    if (popLock.current) {
      return;
    }
    popLock.current = true;
    pop();
  };
  const onPaperClick = (e) => {
    e.stopPropagation();
  };
  const zIndexBase = useZIndexBase2() + 3;
  const zIndexPaper = useZIndexBase2() + 4;
  const transitionState = (_a = activity == null ? void 0 : activity.transitionState) != null ? _a : "enter-done";
  return /* @__PURE__ */ jsx6(
    "div",
    {
      className: container2({
        transitionState: useLazy2(transitionState)
      }),
      ref: containerRef,
      style: assignInlineVars4(
        compactMap({
          [globalVars.bottomSheet.borderRadius]: borderRadius,
          [globalVars.backgroundColor]: backgroundColor,
          [globalVars.dimBackgroundColor]: dimBackgroundColor,
          [vars2.zIndexes.dim]: `${zIndexBase}`,
          [vars2.zIndexes.paper]: `${zIndexPaper}`,
          [vars2.transitionDuration]: transitionState === "enter-active" || transitionState === "exit-active" ? globalVars.computedTransitionDuration : "0ms"
        })
      ),
      "data-stackflow-component-name": "BottomSheet",
      "data-stackflow-activity-id": activity == null ? void 0 : activity.id,
      "data-stackflow-activity-is-active": activity == null ? void 0 : activity.isActive,
      children: /* @__PURE__ */ jsx6("div", { className: dim2, ref: dimRef, onClick: onDimClick, children: /* @__PURE__ */ jsx6("div", { className: paper2, ref: paperRef, onClick: onPaperClick, children }) })
    }
  );
};
BottomSheet.displayName = "BottomSheet";
var BottomSheet_default = BottomSheet;

// src/components/Modal.tsx
import { useActions as useActions4 } from "@stackflow/react";
import { assignInlineVars as assignInlineVars5 } from "@vanilla-extract/dynamic";
import { useRef as useRef4 } from "react";
import {
  useLazy as useLazy3,
  useNullableActivity as useNullableActivity4,
  useStyleEffect as useStyleEffect2,
  useZIndexBase as useZIndexBase3
} from "@stackflow/react-ui-core";

// src/components/Modal.css.ts
import { createRuntimeFn as _7a4685 } from "@vanilla-extract/recipes/createRuntimeFn";
var container3 = _7a4685({ defaultClassName: "dhthxq4 dhthxq0 dhthxq1 dhthxq2 dhthxq3 dhthxqc", variantClassNames: { transitionState: { "enter-active": "_5ozg8c4", "enter-done": "_5ozg8c5", "exit-active": "_5ozg8c6", "exit-done": "_5ozg8c7" } }, defaultVariants: {}, compoundVariants: [] });
var dim3 = "_5ozg8cd dhthxq4 dhthxq0 dhthxq1 dhthxq2 dhthxq3 dhthxqc dhthxq9 dhthxq7 dhthxqb _5ozg8c3";
var paper3 = "_5ozg8ce dhthxqc _5ozg8c3";
var vars3 = { transitionDuration: "var(--_5ozg8c0)", zIndexes: { dim: "var(--_5ozg8c1)", paper: "var(--_5ozg8c2)" } };

// src/components/Modal.tsx
import { jsx as jsx7 } from "react/jsx-runtime";
var Modal = ({
  backgroundColor,
  dimBackgroundColor,
  borderRadius = "1rem",
  maxWidth,
  onOutsideClick,
  children
}) => {
  var _a;
  const activity = useNullableActivity4();
  const { pop } = useActions4();
  const containerRef = useRef4(null);
  const paperRef = useRef4(null);
  useStyleEffect2({
    styleName: "hide",
    refs: [containerRef]
  });
  useStyleEffect2({
    styleName: "offset",
    refs: [paperRef]
  });
  useStyleEffect2({
    styleName: "swipe-back",
    refs: [paperRef]
  });
  const popLock = useRef4(false);
  const onDimClick = (e) => {
    onOutsideClick == null ? void 0 : onOutsideClick(e);
    if (e.defaultPrevented) {
      return;
    }
    if (popLock.current) {
      return;
    }
    popLock.current = true;
    pop();
  };
  const onPaperClick = (e) => {
    e.stopPropagation();
  };
  const zIndexBase = useZIndexBase3() + 3;
  const zIndexPaper = useZIndexBase3() + 4;
  const transitionState = (_a = activity == null ? void 0 : activity.transitionState) != null ? _a : "enter-done";
  return /* @__PURE__ */ jsx7(
    "div",
    {
      className: container3({
        transitionState: useLazy3(transitionState)
      }),
      ref: containerRef,
      style: assignInlineVars5(
        compactMap({
          [globalVars.backgroundColor]: backgroundColor,
          [globalVars.dimBackgroundColor]: dimBackgroundColor,
          [globalVars.modal.borderRadius]: borderRadius,
          [globalVars.modal.maxWidth]: maxWidth,
          [vars3.zIndexes.dim]: `${zIndexBase}`,
          [vars3.zIndexes.paper]: `${zIndexPaper}`,
          [vars3.transitionDuration]: transitionState === "enter-active" || transitionState === "exit-active" ? globalVars.computedTransitionDuration : "0ms"
        })
      ),
      "data-stackflow-component-name": "Modal",
      "data-stackflow-activity-id": activity == null ? void 0 : activity.id,
      "data-stackflow-activity-is-active": activity == null ? void 0 : activity.isActive,
      children: /* @__PURE__ */ jsx7("div", { className: dim3, ref: paperRef, onClick: onDimClick, children: /* @__PURE__ */ jsx7("div", { className: paper3, onClick: onPaperClick, children }) })
    }
  );
};
Modal.displayName = "Modal";
var Modal_default = Modal;
export {
  AppScreen_default as AppScreen,
  BottomSheet_default as BottomSheet,
  IconBack_default as IconBack,
  IconClose_default as IconClose,
  Modal_default as Modal,
  vars as appScreenVars,
  basicUIPlugin,
  vars2 as bottomSheetVars,
  globalVars as cssVars,
  vars3 as modalVars,
  useAppScreen
};
//# sourceMappingURL=index.mjs.map
